{"./":{"url":"./","title":"Introduction","keywords":"","body":"英语学习笔记 [!TIP] 英语学习笔记。 Word Power Made Easy On Writing Well Technical Writing Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-06-30 16:29:08 "},"WordPowerMadeEasy/":{"url":"WordPowerMadeEasy/","title":"Word Power Made Easy","keywords":"","body":" Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"WordPowerMadeEasy/Chapter3.html":{"url":"WordPowerMadeEasy/Chapter3.html","title":"Chapter 3","keywords":"","body":"Chapter 3. How to talk about personality types Words Word Meaning 1. egoist believes in self-advancement Latin Root [ego] I egocentric Self centric egomaniac someone who displays egomania, a tendency to refer to oneself excessively and boastfully [-al] Subject suffix egomaniacal someone who displays egomania, a tendency to refer to oneself excessively and boastfully 2. egotist talks about accomplishments 3. altruist is interested in the welfare of others Latin [alter] Other altruist/altruism/altruistic Person/Quality/Adjective:unselfishly concerned for or devoted to the welfare of others. alternate/alternative/alternation to interchange repeatedly and regularly with one another in time or place; rotate altercation a heated or angry dispute alter ego a second self; a perfect substitute or deputy 4. introvert turns thoughts inward [intro-] inward Latin [verto] to turn 5. extrovert turns thoughts outward [extro-] outward 6. ambivert turns thoughts both inward and outward [ambi-] both Latin [dexter] right hand dexterous/dextrerity skillful or adroit in the use of the hands or body ambidexterous [-ity] noun prefix Latin [sinister] left hand Frenche [gauche] 笨拙的 gaucherie awkward, clumsy,tactless Frenche[droit] right hand adroit/adroitness figuratively skillful, especially in the exercise of the mental facilities 7. misanthrope hates people Greek[misein] to hate Greek[anthropos] mankind 8. misogynist hates women Greek[gyne] woman 9. misogamist hates marriage philanthropist one who loves mankind anthropology the study of the development of the human race gynecologist the medical speciallist who treats female disorders Greek[gamos] marriage [monos] one [bi-] two polygyny many wives polygamy many marriage monogamy single marriage bigamy double marriage Greek[polys] many Greek[andros] male [-ist] person suffix [-ic] [-ous] adjective suffix [-y] suffi for a practice 10. ascetic does not pursue pleasures of the flesh Greek[asketes] monk or hermit Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"WordPowerMadeEasy/Chapter4.html":{"url":"WordPowerMadeEasy/Chapter4.html","title":"Chapter 4","keywords":"","body":"Chapter 4. How to talk about doctors Words Root/Word Meaning 1. internist a physician specializing in the diagnosis and nonsurgical treatment of diseases, especially of adults. Latin[internus] inside (Internist) internal situated or existing in the interior of something; interior 2. gynecologist a physician specializing in gynecology Greek[gyne] woman (gynecology) gynecology/gynecological the branch of medical science that deals with the health maintenance and diseases of women, especially of the reproductive organs. 3. obstetrician a physician who specializes in obstetrics Latin [obstetrix] midwife Suffix [-ician] expert obstetric/obstetrical 4. pediatrician a physician who specializes in pediatrics Greek[paidos] child pediatric [agogos] leading, leader（pedagogue, demagogue） pedagogue Versed pedagogy, but with an uunhappy history pedagogy The leading of children [pedis] foot 5. dermatologist a specialist in dermatology, especially a doctor who specializes in the treatment of diseases of the skin [demos] people demagogue a person, especially an orator or political leader, who gains power and popularity by arousing the emotions, passions, and prejudices of the people. Greek [derma] skin Greek[hypos] under hypodemic 皮下注射 6. ophthalmologist a doctor of medicine specializing in ophthalmology Greek [ophthalmos] eye [oculus] eye ocular adjective refers to the eye [monos] one monocle a lens for one eye [bi-] two binoculars 双筒望远镜 inoculate an \"eye\" is made in your skin when you are affected [-ician] expert Greek [opsis, optikos] vision, sight Greek [metron] measurement optometrists 7. orthopedist A specialist in orthopedics. Greek [orthos] straight, correct. . orthopedist、 orthopedic coined in 1741 by tht author of a textbook ont the prevention of childhod diseases -- at that time the correction of spinal curavture in children was a main concern [odontos] tooth orthodontia orthodontic 8. cardiologist the study of the heart and its functions in health and disease Greek[kardia] heart. cardiagram cardiagraph [logos] science; study 9. neurologist a physician specializing in neurology Greek[neuron] nerve. neurology neurological [algos] pain. neuralgia pain along the nerves and their branches suffix [-osis] abnormal or diseased condition. neurosis/neurotic 神经衰弱 [-itis] inflammation neuritis inflammation of the nerves 10. psychiatrist a physician who practices psychiatry Greek[psyche] spirit, soul, mind psychotic one who lost contact with reality [iatreia] medical healing. psychiatrics mind healer Greek[geras] old. pediatrics the specialty dealing with the particular medical needs of the elderly Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"WordPowerMadeEasy/Chapter5.html":{"url":"WordPowerMadeEasy/Chapter5.html","title":"Chapter 5","keywords":"","body":"Chapter 5. How to talk about various practitioners Root/Word Pronunciation Meaning 1. psychologist sī-KOL′-Ə-jist 心理学家 Greek [psyche] spirit, soul, mind psyche 灵魂，心灵，精神 psychic 精神的，超自然的，灵魂的 Greek [iatreia] medical healing psychiatrist 精神病医生 [-ic] adjective suffix Greek [soma] body psychosomatic 受心理影响的 Greek [pathos] suffering, disease psychopathic 精神变态的 2. psychoanalyst sī-kō-AN′-Ə-list 精神分析学家 psychoanalysis 精神分析 Greek [genesis] birth, origin psychogenic 心理性的 psychotherapy 精神疗法 psychotherapist 精神疗法医生 3. orthodontist awr-thƏ-DON′-tist 正齿医生 Greek [othos] straight Greek [odontos] tooth [paidos] child pedodontic/pedodontist/pedodontia 儿童牙医/儿童牙科的/儿童牙科 Greek [endon] inner endodontist 牙髓病学 [ex-] out exodontist 拔牙专家 [peri-] around periodontist 牙周病学家 4. optometrist op-TOM′-Ə-trist 验光师 [opsis,optikos] view [metron] measurement Greek [therme] heat thermonmeter 温度计 Greek [baros] weight barometer 气压计 Greek [sphygmos] pulse sphygmomanometer 血压计 5. optician op-TISH′-Ən 眼镜商，配制👓技师 6. osteopath OS′-tee-Ə-path 整骨疗法专家 Greek [osteon] bone osteopathy, osteopathic 整骨疗法，整骨疗法的 Greek[pathos] suffering, disease 7. chiropractor KĪ′-rƏ-prƏk′-tƏr 脊骨神经科医生，手疗法医师 chiropratic 手治疗法 Greek [cheir], rewritten to Englisth chiro- hand Greek[-mancy] foretelling chiromancy/chiromancer 手相术/手相师 chiromantic 手相的 chirography/chirographer 书法/书法家 8. podiatrist pƏ-DĪ′-Ə-trist 足病医生 Greek [pous, podos] foot Greek [iatreia] medical healing podiatry/podiatric 足部医疗/足部医学的 Greek [okto] eight octopus 章鱼 Greek [platys] broad,flat platypus 鸭嘴兽 [-ium] place where podium 讲台，表演台 [tri-] three tripod 三足的东西（三脚架，三足鼎，等） chiropodist kƏ-ROP’-Ə-dist 手足病医生 9. graphologist 笔相家 Greek [graphein] to write Greek [kallos] beauty calligraphy 美术字 cardiography 心电图 Greek [kakos] bad,harsh cacography 书法不佳 photograph 照片 Greek [phone] sound phonograph 留声机 Greek [tele-] distance telegraph 电报 Greek [bio-] life biography 传记 10. gerontologist jair′-Ən-TOL′-Ə-jist 老年病专家 Greek [geras] old age gerontological 老年学的 Latin [senex] old senile 衰老的 senescent 变老的,growing old senior/senirority 资深的, older senate 参议院，上院. A council older Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"WordPowerMadeEasy/Chapter6.html":{"url":"WordPowerMadeEasy/Chapter6.html","title":"Chapter 6","keywords":"","body":"Chapter 6. How to talk about science and scientists Word/Root Pronunciation Meaning 1. anthropologist an′-thr Ə -POL′- Ə -jist 人类学家 Greek [anthropos] / mankind Greek [logos] / science 2. astronomer Ə -STRON′- Ə -m Ə r 天文学家 Greek [astron] / start Greek [nomos] / arrangement, law astronomy 天文学 astronomical 天文数字的 astrology 占星术 Greek [nautes] / Sailor astronaut 宇航员 Greek [kosmos] universe cosmonaut 宇航员 nautical 海上的，海员的，水手的 aster star shaped flower asterisk 星号注释 astrophysics 天体物理学 [dis-] against disaster 灾难 disastrous 灾难的 [autos] self autonomous 自治的 autonomy 自治 metronome 节拍器 3. geologist jee-OL′- Ə -jist 地质学家 Greek [geo-] earth geometry 几何学（the measurement of the earth） geometrician 几何学家 geometric 几何学的 geography/geographer 地理学的/地理学家 4. biologist bī-OL′- Ə -jist 生物学家 Greek [bios] life biography 传记 autobiography 自传 Greek [opsis, optikos] view,vision biopsy 活体检查 autopsy 验尸 5. botanist BOT′- Ə -nist 植物学家 Greek [botane] plant botany 植物学 botanical 植物学的 6. zoologist zō-OL′- Ə -jist 动物学家 Greek [zoion] animal zoology 动物学 zoological 动物学的 zodiac 星座，黄道十二宫 7. entomologist en′-t Ə -MOL′- Ə -jist 昆虫学家 Greek [en-] in Greek [tome] a cutting Latin [in-] in Latin [sectus] to cut insect 昆虫 Greek [ek-] out Greek [kentron] center eccentric out of the center，古怪的 eccentricity 古怪 Greek [a-] negative root atom 原子 Greek [ana-] up anatomy 解剖，分解，剖析 tome 册，卷 Greek [dicha-] in two dichotomy 一分为二，对分 Greek [epi-] on,upon epitome 缩影，典型的人或事物 epitomize 做....的摘要 8. philologist f Ə -LOL′- Ə -jist 语言学家 [logos] word or speech Latin [lingua] tongue Greek [philein] love Greek [andros] male philander 调戏，玩弄女性 Greek [sophos] wise philosophy 哲学 Greek [adelphos] brother Philadelphia 费城 Greek [harmonia] harmony philharmonic 爱好音乐的，交响乐团的 Greek [Aphrodite] Greek goddess of love and beauty aphrodisiac 壮阳剂，春药 Greek [biblion] book bibliophile 爱书者 Latin [Anglus] English 9. semanticist s Ə -MAN′-t Ə -sist 语义学家 sematics 语义学 orthopedics 整形手术，矫形术 10. sociologist sō-shee-OL′- Ə -jist 社会学家 Latin [socius] companion associate 关联 social，socialize 社会的，社交 society 社会 sociable 随和的，好焦急的 asocial 缺乏社交性的，自我中心的 [a-] negative prefix [anti-] against antisocial 反社会的 Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"WordPowerMadeEasy/Chapter7.html":{"url":"WordPowerMadeEasy/Chapter7.html","title":"Chapter 7","keywords":"","body":"Chapter 7. How to talk about liars and lying Word/Root Pronunciation Meaning 1. notorious nƏ-TAWR′-ee-Əs 臭名昭著的 Latin [notus] known notoriety 恶名 2. consummate KAHN′-sƏ-mƏt 完美的，至上的 Latin [summus] highest [-ness] noun suffix sweetness 甜蜜 simpleness 简单 enviousness 嫉妒 consummateness 最重要的 [-acy] noun suffix consummacy 最重要的 3. incorrigible in-KAWR′-Ə-jƏ-bƏl 无法矫正的，屡教不改的 Latin [corrigo] to correct or set straight [in-] negative prefix incorrigibility / incorrigibleness 屡教不改 4. inveterate in-VET′-Ə-rƏt 根深蒂固的 Latin [vetus] old inveteracy/inveterateness 积习 veteran 老兵，退伍军人，经验丰富的人 5. congenital kƏn-JEN′-Ə-tƏl 先天的 Greek [genesis] birth/origin Genetics 遗传学 geneticist 遗传学者 genetic 遗传的，基因的 genealogy 家谱 Greek [logos] study [con-] together,with congenital 天生的（孕妇怀孕一刻携带的） hereditary 遗传的（生物学的） 6. chronic KRON′-ik 慢性的，积习难改的 Greek [chronos] time chronicity 慢性长期的 Greek [ana-,a-] negative anachronism 时代错误，不合时代的事 anachronistic 时代错误的 Latin [in-] negative prefix incongruous 不合时宜的（场合上） incongruity 不协调，不一致 chronological 时代学 chronologist 时代学者 chronometer 精密计时器，航行表 chronometry 精密计时法 Greek [syn-] together [-ize] verb suffix synchronize （动）同步 synchronous （adj.）同步的 synchronization （名）同步 7. pathological path′-Ə-LOJ′-Ə-kƏl 病理学的，病态的 [pathos] pain，disease [pathos] means \"feeling\" as well sympathize (v.) 同情 antipathetic 厌恶的，反感的 apathetic 无感情的，冷淡的 apathy 漠然，冷淡 Greek [en-] in empathic 感情移入的 [tele-] distance telepathy 心灵感应 telephone 电话 telegraph 电报 telepathic 心灵感应术的 8. unconscionable un-KON′-shƏ-nƏ-bƏl 昧着良心的，过分的 Latin [scio] to know Latin [sciens] knowing conscience 良知良心 conscious 慎重的，意识到的，神智清醒的 Latin [omni] all omniscient 无所不知的 [pre-] before prescient 有先见之明的 [ne-] negative nescient 无知的，无学的 9. glib GLIB 油腔滑调的，不诚恳的，肤浅的 English [glib] slippery glib 油腔滑调的，不诚恳的 10. egregious Ə-GREE′-jƏs 极坏的，异乎寻常的 Latin [grex, gregis] herd or flock [e-,ex-] out gregarious 爱交际的，合群的 [se-] apart segregate 分开，分离 aggregate 集合，总数，合计 Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"WordPowerMadeEasy/Chapter9.html":{"url":"WordPowerMadeEasy/Chapter9.html","title":"Chapter 9","keywords":"","body":"Chapter 9. How to talk about actions Word/Root Pronunciation Meaning 1. disparaging dis-PAIR′-Əj 轻蔑的，诽谤的. Lower s.b.'s par Latin [par] equal parity 平等，对价。 parity payments to farmers [dis-] negative prefix disparagement 轻视，轻蔑(n.) disparage 轻视，贬低 disparity 不同，不等 disparate 完全不同的 [com-,con-] with, together compare, comparable, comparative 比较，可比的，比较的 pair 一双 peer 同辈，同等的人。 peers(British, nobles) 2. equivocating ee-KWIV′-Ə-kayt′ 使用模棱两可的话隐瞒真相 Latin [aequus]， English[equ-] equal [vox, vocis] voice [fero] to bear or carry vocal 声音的，嗓音的。(n.)元音 vocalize 成为有声 vocallist 声乐家，歌手 [magnus] large Magnavox 米罗华公司（电视制造商） equivocal 模棱两可的 equivocation 模棱两可的话 unequivocally 只有一种含义地，清楚明白地 [ambi-] all ambiguous 模棱两可的 ambiguity 歧义，不明确，暧昧 double entendre 暗示性的，冒险的，性感的。(法国)猥亵含义的双关语 equity 公平，公正，资产净值 inequity 不公 iniquity 邪恶，极不公正。den of inequity: 罪魁祸首 iniquitous 极邪恶的，极不公正的 [nox,noctis] night equinox 昼夜平分点 equinoctial 春分或者秋分的 nocturnal 夜间的，夜间活动的 [animus] mind equanimity 平和，镇静 equability 平静，无变动 [libra] balance,weight equilibrium 平衡，均势，平静 equenstrian 骑马的，骑术的 equestrienne 女骑手，马戏团女骑手 equine like a horse Latin [equus] horse 3. titillate TIT′-Ə-layt′ 挑逗，使觉得痒 Latin [titillate] to tickle titillation 瘙痒，愉快。瘙痒感 4. adulate AJ′-Ə-layt′ 谄媚，奉承 adulation 谄媚 [-ory, -al, -ic, -ical, -ous] adjective suffix adulatory 奉承的 5. proscribing prō-SKRĪB′ 正式宣布有危险或被禁止 [pro-] before [scribo, scriptus] to write scribe 抄写 scrible 涂鸦 prescribe 规定 [de-] down describe 描述 [sub-] under subway 地铁 subsurface 表面下的 subscribe 订阅 script 手稿 scriptreus 经文 manuscript 手稿 typescript 类型 Latin [post] after postscript 附言 6. obviate OB′-vee-ayt′ 避免，消除 Latin [via] road obviation 除去，回避 [tri-] three 7. militate MIL′-Ə-tayt 产生作用或影响 Latin [militis] soldier or fighting man militant 斗志昂扬的 military 军人，军队 militia 民兵，民兵组织 8. malign mƏ-LĪN′ v. 污蔑，诽谤 adj. bad, harmful, evil Latin [malus] bad,evil malignant 恶性的，致命的 malignancy 恶意 malignity n. 极度的恶意，恶性，恶毒 [volo] to wish, to will, to be willing malevolent wishing evil or harm--- a malevolent glance malevolence 恶意，狠毒 voluntary 志愿的 volition 意志，决定，选择 [facio,factus], in English [fec-, fic-, factus, -fy] to do or make malefactor 罪犯 malefaction 犯罪行为 maladroit/maladroitness 不机敏的，笨拙的 malaise (mal ease) 不适，不舒服 malicious 恶意的 malice 恶意，怨恨，祸心 malady 弊病，弊端 maladjusted 失调的 malcontent 不满者 malpractice 玩忽职守。【医生】治疗不当 malnutrition 营养不良 Latin [bene] good benign 温和的 benignant 仁慈的，有益的 benignity 温和，仁慈 benignancy 温和，仁慈，亲切 [dico,dictus] to say or tell dictate/dictator/dictation/dictatorial 命令/独裁者/口述/独裁的 predict 预测 [phone] sound dictaphone 录音机 [contra-] against, opposite contradict 反驳 [ad-] to, toward addiction a saying to or toward, or the complusion to say \"yes\" to a habit. 毒瘾 malediction a curse benediction 祝福 beneficent 行善的 benefactor/benefactress 施主，恩人，捐助者/女捐助人 benefaction 善行 beneficiary 受益人，遗产继承人 benefit 好处，优势 beneficial 有益的，有帮助的 benevolent 慈善的，仁慈的 [bonus] good bonus extra payment bonbon a candy Latin [fides] faith or trust fidelity 忠诚 infidelity 无信仰，不忠诚 [-ory] place where factory 工厂 fiction 小说，虚构的事 artificial 人造的 clarify 阐明 simplify 简化 liquefy 液化 magnify 放大 9. condone kƏn-DŌN′ 容忍，宽恕，原谅 Latin [dono] to give donor on who gives donate/donation to give/捐赠 10. placate PLAY′-kayt′ 安抚，抚慰，使平静 Latin [plac-] 1. to please 2. to appease(平息), soothe(安抚), or pacify placation 安抚 placative/placatory 安抚的 [in-, spelled as im- before letter \"p\"] not implacable 难和解的 placid/placidity 平和的/平静 [com-,con-] together, with complacent 自满的，自鸣得意的 Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"WordPowerMadeEasy/Chapter10.html":{"url":"WordPowerMadeEasy/Chapter10.html","title":"Chapter 10","keywords":"","body":"Chapter 10. How to talk about actions Word/Root Pronunciation Meaning 1. taciturn TAS′-Ə-turn 沉默寡言的，不爱说话的 Latin [teceo] to be silent tacit 缄默的 reticent 寡言少语的，含蓄的，谨慎的 [re-] again [-ent] adjective 2. laconic lƏ-KON′-ik 简洁的，简明的 [Laconia] Ancient Sparta. [-ness,-ity,-ism] noun suffix laconicity usual laconicity laconism 简洁，简练, habitual laconism laconicism 简短, laconicness characteristic laconicness 3. inarticulate in′-ahr-TIK′-yƏ-lƏt 不善辞令的，笨口拙舌的 Latin [articulus] a joint [-ness,-ity,-ism,-ion,-ation] articulation, vocalization 4. garrulous GAIR′-Ə-lƏs 饶舌，话多的 Latin [garrio] to chatter 5. banal BAY′-nƏl 6. verbose vƏr-BŌS′ 冗长的，啰嗦的 Latin [verbum] word verbatim word for word，一字不差的 verbal 口头的，动词的，言语的 [-al] adjective suffix verbiage （贬）冗词。措词 7. voluble VOL′-yƏ-bƏl 喋喋不休的 Latin [volvo,volutus] to roll [re-] back or again revolve 旋转，环绕，转动 involve roll in,包含，涉及 evolve roll out，演化，进化 8. cogent KŌ′-jƏnt Well put, convincing. (理由、论据)有说服力的 Latin [cogo] to drive together, compel, force cogency 说服力，中肯切题 9. vociferous vō-SIF′-Ər-Əs 吵吵嚷嚷的，大声叫喊的，叫嚣的 Latin [vox, vocis] voice vociferouseness/vociferate 大声地说，叫喊 somniferous 催眠的，使爱睡的 Latin [somnus] sleep [-ous] adjective suffix insomnia/insomniac/insomnious 失眠/失眠患者/失眠症的 somnolent 瞌睡的，困的 [ambulo] to walk somnambulism 梦游症 ambulatory 步行的，非固定的 [per] through perambulator/perambulate 巡视者/巡视 amble 漫步，从容地走 ambulance 救护车. so called because it originally was composed of two strecher-bearers who walked off the battlefield with a wounded soldier preamble \"walks before\", 序文，前言 Latin [sopor] sleep soporific 同somnierous。同时也代表安眠药 10. loquacious lō-KWAY′-shƏs 爱说话的，多嘴的，嘴碎，贫嘴。（因为爱说而说） loquacity/loquaciousness 多话 Latin [loquor] to speak [solus] alone soliloquy 自言自语，独白 soliloquist 独白者 soliloquize 独白 Latin [venter,ventris] belly ventriloquist/ventriloquism/ventriloquize/ventriloquistic 口技表演者/口技/表演口技/口技的 ventral 腹部的 ventricle 心室的 Latin [auris] ear auricle 上心房 clavicle 锁骨 cuticle （手指甲或者脚趾根部）外皮 vesicle 痘，水疱 testicle 睾丸，精巢 Latin [avunculus] uncle avuncular 伯父的，像伯伯（叔叔）似的 Latin [dorsum] a back side dorsal 背的 endorse 赞同，支持，宣传 [con-] together spelled as col before a root starting with L, spelled as cor- before a root starting with r, spelled as com- before root starting with m, p, b colloquial/colloquialism 口语的，会话的/口语，俗话 [circum] around circumlocution 委婉曲折，迂回 [-ory] adjective suffix circumlocutory （讲话）委婉曲折的，迂回的 [-ary] adjective suffix contrary 相反的 disciplinary 有关纪律的，惩戒性的 stationary 不动的，固定的 imaginary 想象的 [-ary] noun suffix dictionary 词典 commentary 评论性文章，评论 [e-, ex-] out eloquent expressive, fluent, forceful. 口才流利的 [magnus] large [grandis] grand magniloquent/grandiloquent 夸张的，大言不惭的，吹牛的 [animus] mind magnanimous 宽宏大量的，有雅量的 magnate 富豪，权贵 magnify 放大，赞美 magnificent 壮丽的，宏伟的 [-tude] noun suffix magnitude 巨大，广大，重大，重要 fortitude 坚韧，刚毅，松柏节操 multitude 大量 gratitude 感激，感谢 Latin [Opus] work magnum/magnum opus 大酒瓶/巨著，杰作，代表作 [opero] to work operate 操作 co-operate 合作 operator 运营商 Other Words Word Meaning decorum 端庄，体统 utmost 最大的 arteries 动脉 Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"WordPowerMadeEasy/Chapter11.html":{"url":"WordPowerMadeEasy/Chapter11.html","title":"Chapter 11","keywords":"","body":"Chapter 11. How to insult your enemies Word/Root Pronunciation Meaning 1. martinet mahr-tƏ-NET′ 严格执行纪律的人 Jean Martinet a stricter, more fanatic drillmaster France had never seen martinetish/martinetism 严格的训练，严格 2. sycophant SIK′-Ə-fƏnt 谄媚者，拍马屁的 Greek [sykon] fig Greek [phanein] to show sycophancy n. 拍马屁 Greek [dia-] through diaphanous （织物等）半透明的 sycophantic 说奉承话的 3. dilettante dil′-Ə-TANT 浅薄的涉猎者 Itanlian [dilettare] to delight dilettantish 半吊子的，半瓶醋似的 dilettantism 浅薄涉猎 tyro （艺术，科学等专业领域的）新手 virtuoso, 复数(virtuosos, virtuosi) 艺术大师，演奏能手 Itanlian [i] ending plural, common in musical circles libretto -> libretti 剧本 concerto -> concernti 协奏曲 4. virago vƏ-RAH′-go 泼妇 Latin [vir] man virago far from being stereotypically feminine. coarse, aggressive, loud-mouthed termagant 泼妇，好吵架的女人 harridan 老泼妇 5. chauvinist SHŌ′-vƏ-nist 沙文主义者 Nicolas Chauvin soldier of the French Empire who is exaggerated patriot chauvinism 沙文主义 Latin [pater,patris] father, fatherland patriot 爱国者 patriotic 爱国的 [-mony] Juno Moneta, the Roman goddess who guarded the temples of finance patrimony 祖传的遗产 Greek [onyma] name patronymic 父姓，源于父名的名字 Greek [syn-] together，with synonym 同义词 [anti] against antonym 反义词 homonym/homophone 同音同形异意词 synonymous 同义的 paternity 父权 paternal 父亲的 paternalism 家长式制度 paternalistic 家长式的 Greek [archein] to rule patriarch 家长，族长，元老 Latin [caedo] to kill patricide 弑父 patrician 贵族似的 patron 资助人 patronize 资助 patronizing 要人领情的 padre 神父 Latin [mater,matris] mother matriarch 女家长 maternity 母性 maternal 母亲的，母亲般的 matron 受人尊敬的 已婚老妇人 alma mater soul mother，母校 [-mony] state，condition，result matrimony 婚姻生活 sanctimony 假装神圣 parsimony 异常节俭，小气 matricide 弑母 [sui] oneself suicide 自杀 [frater,fratris] brother fratricide 杀兄弟 fraternize 结交，交友 fraternal brotherly fraternity 兄弟会 [soror] sister sororicide 杀姐妹 sorority 妇女联谊会，姐妹会 [homo] person homicide 杀人，杀人犯 Latin [rex,regis] King regicide 弑君 tyrannosaurus rex 霸王龙 regal 君主的，皇家的 regality 君权 regalia 王权，王位的标记 Latin [uxor] wife uxoricide 杀妻 uxorious 溺爱妻子的 uxorial 妻子的 marital 婚姻的（丈夫的） exmarital 婚外的。exmarital affairs premarital 婚前的 Latin [maritus] husband mariticide 杀夫 Latin [infans,infantis] baby infanticide 杀婴 Greek [genos] race, kind genocide 种族灭绝 parricide 杀近亲，杀长辈 6. monomaniac mon′-Ə-MAY′-nee-ak 偏执狂者，对一事狂热者 Greek [monos] one Greek [mania] madness Greek [dipsa] thirst dipsomania 嗜酒狂 Greek [klepte] thief kleptomania 偷窃成瘾的，obsessive shoplifter. not because she wants, let alone need, just cannot help herself Greek [pyros] fire pyromania 纵火犯 Latin [incendo,incensus] to set fire incendiary 引火的。n.纵火犯 Latin [ardo, arsus] to burn arson set fire for money 7. iconoclast ī-KON′-Ə-klast′ 攻击传统观念的人 [eikon] a religious image [klaein] to break 8. atheist AY′-thee-ist 无神论者 Greek [a-] negative prefix Greek [theos] god Greek [gnosis] knowledge atheism 无神论 agnosticism 不可知论 agnostic 不可知论者 Greek [dia-] through diagnosis 诊断 diagnose 诊断 Greek [pro-] before prognosis 预后 prognosticate 预言，预示 diagnostician 诊断医生 prognostication 预言 Greek [monos] one monotheism 一神论 Greek [poly] many polytheism 多神论 Greek [pan] all pantheism 泛神论 Greek [logos] science study theology/theological/theologian 神学/神学的/神学的 9. lecher LECH′-Ər 好色之徒 French [lechier] to lick lecherous 好色的，淫荡的 Latin [libido] pleasure libidinous lƏ-BID-Ə-nƏs 好色的，淫荡的 [lascivia] wantonness lascivious lƏ-SIV-ee-Əs 好色的，淫荡的，色情的，猥亵的 Latin[lubricus] slippery lubricious/lubricate/lubricity 油滑的，好色的/使润滑/光滑，狡猾 Latin [licere] to be permitted licentious 放荡的，淫乱的，荒淫，娼 license 许可证 illicit 不允许的 Anglo-Saxon [lewd] vile lewd 好色的，淫荡的，下流的 Anglo-Saxon [lust] plesure,desire lustful 贪得无厌的，好色的 lubricity 润滑性 lust 欲望 Latin [prurio] to itch prurient 好色的，淫秽的，引起淫欲的 pruritis 瘙痒 pruritic 瘙痒的 10. hypochondriac hī′-pƏ-KON′-dree-ak 疑病症患者(古希腊人认为人的焦虑来自腹部) Greek [hypos] under Greek [chondros] 胸骨中的软骨 hypochondriacal 忧郁症的，过分担心自己健康的 hypodermic 皮下注射 hypothyroid 甲状腺技能减退 Greek [hyper] over hypercritical 吹毛求疵的 hyperthyroidism 甲亢 hypertension 高血压 hyperacidity 胃酸过多的 hyperactive 极度活跃的 hypersensitive 高度敏感的 Other Words Word Meaning insinuating 曲意巴结的，暗示的 manslaughter 杀人犯 henpecked 惧内的 abdomen 腹部的 Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"WordPowerMadeEasy/Chapter12.html":{"url":"WordPowerMadeEasy/Chapter12.html","title":"Chapter 12","keywords":"","body":"Chapter 12. How to flatter your friends Word/Root Pronunciation Meaning 1. convivial kƏn-VIV′-ee-Əl 喜好交际的，随和的 Latin [vivo,vita/convivo/convivium] to live,live/live together/fist or banquest vivacious 活泼的，快活的 vivacity 活泼，快活，有生气 vivid 生动的 vividness 生动 revive 复活，再生 Latin [sect-] to cut vivisection 活体解剖 Latin [pareo] to give birth viviparous 胎生的，母体发芽的 Latin [ovum] egg oviparous 卵生的 ovoid/oval 卵形的/椭圆形的 ovulate 排卵，产卵 ovary 卵巢 ovum 卵子 French [oeuf] Called (loof) in French. shaped like an egg, so 15-0 in tennis is 15-love vital 重要的 revitalize 使恢复元气，使新生 devitalize 夺取生命，使衰弱 vitamin 维生素 join de vivre joy of living ennui 厌倦，无聊 bon viviant a person living luxriously French [gourmet] 美食家 gourmand 喜欢吃喝的人 gormandize 大吃大喝，stuff oneself like a pig glutton/gluttonize/gluttonous 贪吃的/暴饮暴食/暴食的，饕餮的，贪婪的/ 2. indefatigable in′-dƏ-FAT′-Ə-gƏ-bƏl 不知疲倦的 [in-] negative prefix [-able] able to be 3. ingenuous in-JEN′-y-Əs 天真无邪的，朴实的 ingenious 聪明的 ingenuity 聪明才智 naivete 天真 Latin [credo] to believe credulous/creduity 轻信的，易受骗的/轻信 [-ouse] full of. Adjective suffix credible 可信的，可靠的 gullible 易受骗的，轻信的 4. perspicacious pur′-spƏ-KAY′-shƏs 有洞察力的，判断力强的 Latin [specto] to look [per-] through spectacle 奇观 spectacular worth looking at，富丽的，壮观的 spectator 观众，旁观者 inspect 检查 retrospect 回顾 [pro-] forward, ahead prospect 前景，希望. prospective bride, groom, child prospective 预期的，未来的，可能的 introspective 反省的，内省的 [intro-] inside circumspect 谨慎小心的，周到的 circumspection/circumspectness 细心，谨慎 specious 似是而非的 conspicuous 显眼的，引人注目的 perspicacity 敏锐 [acuo] to sharpen acumen 敏锐，聪明 acupuncture 针刺疗法 [punctus] point acute 急性的，灵敏的 acuity 尖锐，剧烈 punctuate 加标点符号，不时打断 punctual 准时的，守时的 punctilious 拘谨的，谨小慎微的 [pungo] to pierce sharply pungent 辛辣的，刺激性的，苦痛的 perspicuous 说话清楚的，明白易懂的 perspicuity/perspicuousness 清楚，明白 5. magnanimous mƏg-NAN′-Ə-mƏs 大心脏，宽宏大量的 Latin [animus] mind Latin [anima] life principle, soul, spirit animate/inanimate 有动画的/无生命的 animation 动画 magnanimity 宽宏大量 Latin [pusillus] tiny pusillanimous 懦弱的，胆怯的 pusillanimity 无力气，胆怯 Latin [unus] one unanimous 全体一致的 Latin [aequss] equal equanimity 平和，镇静 animus 意图，仇恨 (unfriendly mind) animosity 敌意. \"There is a real animosity between Bill and Ernie\" 6. versatile VUR′-sƏ-tƏl 多才多艺的 Latin [verto, versus] to turn versatility 多才多艺 7. stoical STŌ′-Ə-kƏl 坚忍的，怡淡寡欲的 Greek [stoa] porch 古希腊的Zeno在门廊宣讲，清心寡欲才能幸福 stoics/stoicism 禁欲主义者/禁欲主义 8. intrepid in-TREP′-id 无畏的 Latin [trepido] to tremple interpidity/intrepidness 大胆，刚勇 9. scintillating SIN′-tƏ-layt-ing 闪烁的，焕发才智的 Latin [Scintilla] quick,bright spark scintillate/scintillation 焕发才智/闪烁 10. urbane ur-BAYN′ 彬彬有礼的，温文尔雅的 Latin [urbs] city urban 城市的 [sub-] near suburbs 郊区，城郊 suburbia 郊区习俗 [inter-] between interurban between cities [intra-] inside intraurban within a single city [ex-] out [-an] adjective suffix Latin [rus, ruris] country rural 乡村的 rustic 乡村的，质朴的，粗鲁的. (n.)乡下人，农夫 rusticity 乡村的特点、风格或者气息 rusticate 在农村定居，罚（大学生）听雪离校 Other Words Word Meaning unappetizing 引起食欲的 [-itude] 性质，状态 lassitude 无精打采的，疲倦，疲乏 fastidious 挑剔的，讲究的 connoisseur 鉴赏家，内行 Latin [cern] sure, seperate. 搞清，区别，分开 discerning 有识别力的，有洞察力的 voraciously 贪婪的 faintly 微弱的 Latin [rogare] ask derogatory 贬低的 tactful 机智的，机敏的 Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"WordPowerMadeEasy/Chapter14.html":{"url":"WordPowerMadeEasy/Chapter14.html","title":"Chapter 14","keywords":"","body":"Chapter 14. How to talk about common phenomena and occurrences Word/Root Pronunciation Meaning 1. penury PEN′-yƏ-ree 赤贫，缺乏 Latin [penuria] need, neediness penurious pƏ-NYR′-ee-Əs 贫穷的，赤贫的 parsimonious/parsimony PAHR′-sƏ-mō′-nee 过渡节俭的，吝啬的/过度节俭，吝啬 indigence IN′-dƏ-jƏns 贫乏，穷困 indigent IN′-dƏ-jƏnt 贫乏的，穷困的 destitution des′-tƏ-T′-shƏn 贫乏，穷困 destitute DES′-tƏ-tt 极度缺乏的，贫乏的 Latin [ad-] toward (changing to af- bfore a root beginning with f) Latin [fluo] to flow affluence AF′-l-Əns 富裕，富足 affluent AF′-l-Ənt 富裕的 fluid 流利的 influence 影响 confluence 回流 Latin [opulentus] wealthy opulence OP′-yƏ-lƏns 富裕，豪华 opulent OP′-yƏ-lƏnt 富裕的，豪华的 2. vicarious vī-KAĪR′-ee-Əs 间接体验的，代理的，感同身受的 3. ephemeral Ə-FEM′-Ə-rƏl 短暂的，瞬息的 Greek [ephemera] dayfly [e-] out [vanesco] to vanish evanescent 短暂的，迅速消失遗忘的 evanesce (v.) （生命周期短暂）逐渐消失，隐没begin to vanish [-ent] adjective suffix [-esce] begin to adolesent begin to grow up。青春期 putrescent begin to rot. 将腐烂的，腐败的 convalesce begin to get well 康复 obsolesent becoming obsolete 逐步废弃的 4. euphemism Y′-fƏ-miz-Əm 委婉语，委婉说法 Greek [eu-] good Greek [pheme] voice [-ism] noun suffix euphemistic 委婉的 euphony good sound. 谐音 euphonic/euphonous 好听的 eulogy 颂词，颂文 [logos] science, study [logos] word, speech philology 语言学 monologue 独白 dialogue 对话 epilogue 结语 prologue 开场白，序言 eulogistic/eulogize/eulogist 做颂词的/称赞，颂扬/赞颂者 euphoria good feeling。幸福感，精神欢快 Greek [thanatos] death euthanasia 安乐死 5. badinage BAD′-Ə-nƏj 打趣，玩笑 cliche once new and fresh, but which now is so old. \"You speak in cliches\" bromide 溴化物，安眠药，陈词滥调 Greek [platus] flat [-tude] noun suffix。表示状态 platitude 老生常谈 platitudinous 平凡的，陈腐的 Greek [an-] negative prefix Greek [odyne] pain anodyne 止痛的，镇痛的，四平八稳的 6. bovine BŌ′-vīn′ 牛的，关于牛的，迟钝的. A bovine person is somwhat like a vegetable: eats and grows and lives, but apparently is lacking in any strong feelings Latin [bovis] ox, cow Latin [-ine] like, similar to Latin [leo] lion leonine lion like Latin [canis] dog canine dog-like Latin [felis] cat feline cat-like Latin [porcus] pig porcine piglike Latin [vulpus] fox vulpine foxlike (in appearance or temperament) 狐狸似的，狡猾的 Latin [lupus] wolf lupine wolflike 狼的，似狼的 lupus 狼疮，天狼座 Latin [ursus] bear ursine bearlike 熊的，像熊的 Ursa Major and Ursa Minor 大熊星系，小熊星 Ursula a little bear Latin [equus] horse equine horselike Latin [piscis] fish piscine fishlike，鱼的 7. nostalgia nƏ-STAL′-jƏ 怀念，念旧，怀旧 Greek [nostos] a return Greek [algos] pain nostalgic 怀旧的，乡愁的，令人怀念的 8. cacophony kƏ-KOF′-Ə-nee 发音不和谐 Greek [kakos] bad，harsh，ugly cacophonous 发音不和谐的 phonograph 留声机 saxophone 萨克斯管 xylophone 木琴 phonetics 发音学，语音学 phonics the science of sound。声学 9. carnivorous kahr-NIV′-Ər-Əs 肉食的 [carnis] flesh carnelian color of red flesh carnival 狂欢节 carnal 世俗的，肉体的，性欲的 carnage great destruction of life。大屠杀 reincarnation 再投胎，再生 incarnate 人体化的，拟人化的 [voro] to devour Latin [herba] herb, 草本植物 herbivorous 素食的 voracious 贪吃的，贪婪的。voracious eater, voracious reader, voracious in one's pursuit of money Latin [omni] all omnivorous 杂食性的 Latin [potens，potentis] powerful omnipotent 权力无限的 impotent 无力的，虚弱的 potentate 君主，统治者 potent 强有力的，有权势的 potential 潜在的，潜力的 omniscient all-knowing，无所不知的 omnipresent 无所不在的 Latin [ubique] everywhere ubiquity 无处不在的 omnibus 公共汽车，文库 10. clandestine klan-DES′-tin 秘密的，私下的，暗中的 Latin [clam] secretly [rept-] creep, 爬 surreptitious 鬼鬼祟祟的 Other Words Word Meaning [syl-] 抓捕 asylum 避难所，精神病院 slum 贫民窟 arid 干旱的，干燥的 bumbling 装模作样的。犯错误 fallacious 欺骗的，谬误的 hackneyed 老一套的，陈腐的 allay 减轻(疼痛) sedative 有镇静作用的 trauma 创伤，损伤 stealthy 悄悄的，鬼鬼祟祟的 sneaky 鬼祟的 furtive 鬼祟的 Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"WordPowerMadeEasy/Chapter15.html":{"url":"WordPowerMadeEasy/Chapter15.html","title":"Chapter 15","keywords":"","body":"Chapter 15. How to talk about what goes on Word/Root Pronunciation Meaning 1. enervate EN′-Ər-vayt′ 使衰弱，使失去活力 Latin [nervus] nerve enervation 无活力，衰减 Greek [en-] in Greek [ergon] work erg 尔格（功的单位） [syn-] together or with synergism 神人协力合作说，合作 synergy 协同，配合 2. castigate KAS′-tƏ-gayt′ 严厉批评，惩戒 Latin [castigate] to punish 3. self-abnegate self-AB′-nƏ-gayt′ 自我否定 Latin [ab-] away Latin [nego] to deny self abnegation 自我克制 Latin [neg-] no, not Latin [aio] I say negate 取消，使无效，否定，否认 negativity 否定性 4. recapitulate ree′-kƏ-PICH′-Ə-layt′ 重述，概括 Latin [caput, capitis] head captain 机长，船长 capital 首都 decapitate 杀头 Latin [capitulum] little head recapitulate 重述，概括 capitulate 认输，屈从 5. vegetate VEJ′-Ə-tayt′ 过单调呆板的生活，植物似的生长 Latin [vegeto] to live and grow 6. simulate SIM′-yƏ-layt′ 假装，冒充 Latin [simulo] to copy Latin [similis] like or similar simulation 模仿，模拟 dissimulation 掩饰，虚伪，装糊涂 dissemble/dissemblance 掩饰（真相）/ 虚饰，伪装 Latin [dis-] negative prefix 7. intimate IN′-tƏ-mayt′ 亲密的，亲近的 Latin [intimus] innermost intimation 暗示，正式宣告 8. alleviate Ə-LEE′-vee-ayt′ 减轻，缓解 Latin [levis] light [ad-], changes to al- before root starting with l to relieve to make light or easy again [e-,ex-] out elevate 提拔，提升 levitation 升空，漂浮 levity 欠考虑，不慎重，轻率，轻浮 9. commiserate kƏ-MIZ′-Ə-rayt 怜悯，同情 Latin [miser] wretched(可怜的，讨厌的，苦恼的) prefix [con-] becomes com- before a root beginning with m- together or with miser/miserly/miserable/misery 吝啬鬼/吝啬/痛苦/痛苦 10. vacillate VAS′-Ə-layt 摇摆，波动，犹豫 Latin [vacillo] to swing back and forth ambivalent/ambivalence 对某人，某物有矛盾情感的/矛盾情绪 Latin [oscillum] a swing oscillate 使震动，使振荡 Other Words Word Meaning courteous 客气额，有礼貌的，谦恭的 vituperation 辱骂，责骂 scold 训斥，责骂 morosely 愁眉苦脸的，忧郁的 esteem 尊重，敬重，认为 gloomy 黑暗的，令人沮丧的 scarcely 几乎不，简直不 dreary 沉寂的，阴沉的 rapt 全神贯注的，入迷的 feign 假装，伪装 bereavement 丧亲之痛 pendulum 钟摆 virile 有男子气概的 soporific 催眠的，让人瞌睡的 scold 责骂 rebuke 责备 censure 指责 reprimand 指责 berate 谴责或斥责 unstimulating 不刺激的 stagnant 不流动的，停滞的 synthetic 合成的，人造的 pejorative 轻蔑的，贬损的 frivolity 轻浮 flippancy 轻浮 Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"WordPowerMadeEasy/Chapter16.html":{"url":"WordPowerMadeEasy/Chapter16.html","title":"Chapter 16","keywords":"","body":"Chapter 16. How to talk about a variety of personal characteristics Word/Root Pronunciation Meaning Latin [-ous] full of Latin [sequor] to follow 1. obsequious 奉承拍马的，谄媚的 obsequies 葬礼，丧礼 subsequent 后来的，随后的 sequel 续篇，续集 2. querulous 抱怨的，爱发牢骚的 Latin [queror] to complain 3. supercilious 高傲的，傲慢的 Latin [cilium] eyelid 4. obstreperous 喧嚣的，喧闹的 Latin [strepo] make a noise 5. impecunious 没钱的，不名一文的 pecuniary pertaining to money 6. chivalrous 有骑士风度的，彬彬有礼的 French [cheval] horse Lantin [caballus] an inferior horse cavalcade 骑马队伍，车队 cavalier 骑士. (adj.)随便的，傲慢的 cavalry 骑兵队 chivalry 骑士制度，骑士气概 chivalric same as chivalrous 7. innocuous 无害的，平淡无味的 Lantin [noceo] to injure innocent 无辜的 noxious 有害的，有毒的 8. bibulous 嗜酒的，吸水的 Lantin [bibo] to drink imbibe to drink in bib 围嘴，围裙的上部 9. cadaverous 死人般的，尸体般的 cadaver 尸体 decadent 堕落的，颓废的 10. dolorous 悲伤的，痛苦的 dolor 悲伤，忧伤 doleful 令人沮丧的，悲哀的 Lantin [con-] with， together condole 表示同情，吊唁 condolence 吊唁，慰唁 Other Words Word Meaning deteriorating 恶化，变坏 Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"TechnicalWriting/":{"url":"TechnicalWriting/","title":"Technical Writing Guide","keywords":"","body":"Overview 本文译自Google Technical Writing Course，除非特别声明，本内容遵循 Creative Commons Attribution 4.0 License, 示例代码遵循 Apache 2.0 License。 本文尽量保证翻译的内容准确，但英语水平有限，且中英文语言习惯不同，不免有描述不恰当之处。翻译过程中，也会省略掉一部分与技术文档写作无关的内容，并重新编排章节顺序。 若有任何疑问，请邮件联系mailto:lambert.q.wang@gmail.com。 本文目标读者为： 软件工程师 软件工程及计算机科学专业学生 计算机领域相关的其他角色 (例如，产品经理)。 （译者补充）有一定英文基础的从业人员 课程内容: Title and course details Summary Technical Writing One 技术文档写作基础 Technical Writing Two 技术文档写作的4个中级主题 Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"TechnicalWriting/One-Introduction.html":{"url":"TechnicalWriting/One-Introduction.html","title":"Part One - Introduction","keywords":"","body":"Technical Writing One introduction 1. 目标读者 学习此课程，你不需要是一个英文写作高手，但你至少需要有一定英文写作技能。 如果你还没有学过任何的技术写作课程，该课程将会非常适合你。若你有上过其他英文写作课程，该课程将会是一个不错的回顾课程。 2. 学习目标 通过该课程的学习，你将会掌握： 使用术语: 包括简写和首字母缩写。 代词的使用方法。 区分主动语态和被动语态。 将被动语态转换为被动语态。 在三种情况下，语句使用主动语态优于使用被动语态。 将语句修改得更清晰和有效的三种方式。 将句子修改简短的四种方式。 项目符号列表和有序列表的区别。 创建列表来帮助行文。 段首句子的使用。 每段关注单个主题。 在文档开头陈述重要观点。 确定文章的目标读者。 确定目标读者的知识背景（哪些知识是读者已知，哪些是读者需要知道的）。 了解“知识诅咒\" (curse of knowledge) 了解和修改专业用语。 表明文档的目标和读者。 将长句子进行有效拆解。 正确地使用逗号，括号，分号，破折号和分号。 学会Markdown的初级使用方法。 无论成为优秀的工程师还是优秀的科技写作者，都需要多年的深耕和练习。该课程不会让你马上变成一个优秀的科技文献写作者，但是可以提升你的写作技能。 3. 可选单元 部分单元被标记为可选的(optional)，表示该材料不是最核心的，但它对你可能还是有一定作用。 Reference 原文：https://developers.google.com/tech-writing/one Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"TechnicalWriting/One-Words.html":{"url":"TechnicalWriting/One-Words.html","title":"Part One - Words","keywords":"","body":"Words 我们深入研究了各种文档，发现最优秀的句子主要由单词组成。（译注：戏谑？） 定义新术语 编辑或写作时需要注意，一些术语对部分或者全部目标读者来说并不了解。如果你的文档有此种情况，可以使用以下两个技巧： 如果术语存在，可以链接到对应的术语解释出处（不要重复造轮子）。 如果文档本身就要介绍该术语，定义该术语，如果要介绍多个新术语，请将这些术语放到术语表。 术语命名一致性 若你在代码中把变量名字修改掉，你的代码无法编译通过。同样地，如果你文档中间将一个术语的名字作修改，你的想法无法“编译”（在读者的脑子里）。 所以准则就是：在文档中始终使用同一个不会混淆读者的单词或术语。若你已经将组件命名为 thingy, 请不要再叫它为thingamabob。例如，下面这个错误的语句示范，将 Protocol Buffers在句子中间改称为了 protobufs： Protocol Buffers provide their own definition language. Blah, blah, blah. And that's why protobufs have won so many county fairs. 是的，技术写作就是这么“残酷”和严格。不过，技术写作也提供了一种绝佳的变通方法。即，当介绍一个冗长的概念名或产品名时，你也可以为其定义一个简化的命名；此后，你可以在后续文档中持续使用该简化命名。例如： Protocol Buffers (or protobufs for short) provide their own definition language. Blah, blah, blah. And that's why protobufs have won so many county fairs. 恰当使用首字母缩写 文档中或者段落中首次使用新的首字母缩写时，应当先将全称标出，并在全称后的括号内跟上缩写。同时，将全称和缩写粗体加黑。例如： This document is for engineers who are new to the Telekinetic Tactile Network (TTN) or need to understand how to order TTN replacement parts through finger motions. 在首次定义缩写后，就可以在文档后续位置使用该缩写了。例如： If no cache entry exists, the Mixer calls the OttoGroup Server (OGS) to fetch Ottos for the request. The OGS is a repository that holds all servable Ottos. The OGS is organized in a logical tree structure, with a root node and two levels of leaf nodes. The OGS root forwards the request to the leaves and collects the responses. 缩写还是全称？ 当然，你可以恰当地介绍和使用缩写，但是应该要使用缩写吗？缩写当然可以将句子缩短。例如，TTN比Telekinetic Tactile Network少了2个单词。然而，缩写不过是一种形式的抽象， 读者必须在脑海里将新认识的缩写重新展开。例如，读者在脑海里将Telekinetic Tactile Network展开成TTN，所以看上去“更短”的缩写，实际上需要比全称花更多的时间来处理。 重度使用的缩写最终会发展出自己的“身份”。经过多次出现后，读者不用再将缩写展开成全称。例如，许多Web开发者已经忘了HTML全称是什么了。 以下为使用缩写的一些建议： 没有必要为使用量很小的术语建立缩写。 如果符合以下两种情况，请务必定义缩写： 缩写比全称短的多。 缩写在文档中会多次出现。 练习 修改下列段落。假设MapReduce在文档中第一次出现的位置是该段落，且MR是MapReduce的最佳缩写。 Jeff Dean invented MapReduce in 1693, implementing the algorithm on a silicon-based computer fabricated from beach sand, wax-paper, a quill pen, and a toaster oven. This version of MR held several world performance records until 2014. %accordion%点击展开答案%accordion% 有多种修改方式。一种方式使用MR 缩写: Jeff Dean invented MapReduce (MR) in... This version of MR held several... 你也可以接着使用全称: Jeff Dean invented MapReduce in... This version of MapReduce held several... 顺便一说，一个成熟的技术文档作者会将\"beach sand, wax-paper, a quill pen, and a toaster oven\" 转变成列表形式。当然，这是其他章节要介绍的内容了。 %/accordion% 令人混淆的代词 代词指代前文介绍的名词。这些代词就相当于程序代码中的指针。但就像指针一样，代词也会带来一些错误。错误地使用代词会在你读者的脑海里引入“空指针”。在很多情况下，你应当直接使用名词而不是使用其代词。然而，使用代词带来的好处有时会超出它引入的风险（就像这个句子一样）。 [!Note] 译注，原文是： However, the utility of a pronoun sometimes outweighs its risk (as in this sentence). 对代词的使用，有以下建议： 仅在介绍过名词后使用代词；绝不在名词出现前使用代词。 将代词与其指代的名词摆放得尽可能的近。一般来说，如果名词和代词间有5个其他单词，就需要考虑直接使用这个名词而不是使用代词。 如果名词和其代词间有其他名词，就直接使用名词，而不要使用代词。 It and they 在文档中以下代词最容易引起混淆： it they, them, and their 例如，在下面的句子中，It指代的是Python还是C++呢？ Python is interpreted, while C++ is compiled. It has an almost cult-like following. 又例如，下面句子中their指代的是什么？ Be careful when using Frambus or Carambola with HoobyScooby or BoiseFram because a bug in their core may cause accidental mass unfriending. This and that 容易引起混淆的代词还有： this that 例如，在下面这个句子中，This可以指代user ID，也可以指向 running the process，也可以指向前面整句。 Running the process configures permissions and generates a user ID. This lets users authenticate to the app. 在使用this和that时，有一些小技巧可以避免混淆： 直接将this和that替换成对应的名词。 在this和that后马上使用对应的名词。 像下面的例句一样，根据实际情况使用代词或者明确的名词： This user ID lets users authenticate. The process of configuring permissions lets users authenticate. The combination of permissions and a user ID lets users authenticate. 练习 下面例句中的代词的指向对象是不明确的，找出其所有可能的含义： Aparna and Phil share responsibilities with Maysam and Karan and they are next on call. You may import Carambola data via your configuration file or dynamically at run time. This may be a security risk. %accordion%点击展开答案%accordion% They可能指向以下对象: Aparna and Phil Maysam and Karan Aparna, Phil, Maysam, and Karan any one of the individuals as a singular gender-neutral pronoun This可能指向以下对象: importing via the configuration file importing dynamically at run time both %/accordion% Reference 原文：https://developers.google.com/tech-writing/one/words Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"TechnicalWriting/One-ActiveVoice.html":{"url":"TechnicalWriting/One-ActiveVoice.html","title":"Part One - Active Voice","keywords":"","body":"Active voice vs. passive voice 技术文档写作中，大部分句子都应该使用主动语态。通过该单元的学习，你将会掌握： 如何区分主动语态和被动语态 （译注：译者假设你有一定英文基础，这部分内容略过）。 将被动语态改成主动语态，使句子清晰。 优先使用主动语态 写作中，大部分时间应该使用主动语态。被动语态仅在极少数的情况下使用。使用主动语态有如下好处： 大部分读者阅读时，都会在脑里将被动语态转成为主动语态。为什么还要让你的读者额外的时间作这个转换？坚持使用主动语态，读者可以跳过”预编译“阶段，直接进入”编译“阶段。 被动语态将句子颠倒过来，会混淆你的想法，让句子模糊不清。而且被动语态只能间接地表达句子里的动作。 有些被动语句完全省略了主语，强迫读者去猜测主语。 主动语句一般短于被动语句。 勇敢点，使用主动语态吧！ 科研报告 (可选) 被动语态在一些可研报告中有点过于泛滥了。在这些报告中，实验者和实验器械通常消失了，变成如下样子的被动语句： It has been suggested that... Data was taken... Statistics were calculated... Results were evaluated. 从这些句子中可以看出主语和宾语吗？不能。被动语态有让句子变得更加客观吗？没有。 许多科学期刊都采用了主动语态，我们建议其他期刊也加入这个行列。 练习 重写句子，将下列被动语句写成主动语句。 The flags weren't parsed by the Mungifier. A wrapper is generated by the Op registration process. Only one experiment per layer is selected by the Frombus system. Quality metrics are identified by asterisks; ampersands identify bad metrics. %accordion%点击展开参考答案%accordion% The Mungifier didn't parse the flags. The Op registration process generates a wrapper. The Frombus system selects only one experiment per layer. Asterisks identify quality metrics; ampersands identify bad metrics. %/accordion% Reference 原文：https://developers.google.com/tech-writing/one/active-voice Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"TechnicalWriting/One-ClearSentences.html":{"url":"TechnicalWriting/One-ClearSentences.html","title":"Part One - Clear Sentences","keywords":"","body":"Clear sentences 喜剧作家追求最有趣的结果，恐怖作家追求最惊悚的，技术文档作者则追求最清晰的。在技术文档写作中，清晰是优先于其他所有准则。本单元建议了使句子优美清晰的一些方法。 选择强动词 许多技术文档作者认为动词是句子中最重要的部分。选择正确的动词，句子剩下的部分将不言自明。不幸的是，一些作者只重复使用一些平淡的动词，就像每天只给客人不新鲜的的苏打饼和湿漉漉的生菜一样。选择正确的动词需要花费更多时间，但会产生更令人满意的结果。 为了吸引和启发读者，选择精确、有力、具体的动词。减少使用不精准、弱的或通用的动词，例如： be动词的各种形式： is, are, am, was, were等 occur happen 参考下面例句中如何使用强动词让句子变得更“燃“： Weak Verb Strong Verb The exception occurs when dividing by zero. Dividing by zero raises the exception. This error message happens when... The system generates this error message when... We are very careful to ensure... We carefully ensure... 许多作者对be动词有强依赖，好像这是餐架上唯一的香料一样。选择各种不同的动词，让你的文档更加“开胃”。 当然，be动词有时是最佳选择，所以不要认为你要从你的文章中拿掉每个be动词。 请注意，通用动词往往暗示着其他的小毛病，例如： 句子中的主语是不精确的，或缺失的。 被动语句。 练习 选择精准的动词让句子意义变得更明确。你可以随意重排句子并添加、修改或删除单词： When a variable declaration doesn't have a datatype, a compiler error happens. Compiler errors occur when you leave off a semicolon at the end of a statement. %accordion%点击展开参考答案%accordion% 可能的答案如下: When a variable declaration doesn't specify a datatype, the compiler generates an error message. If you declare a variable but don't specify a datatype, the compiler generates an error message. 可能的答案如下: Compilers issue errors when you omit a semicolon at the end of a statement. A missing semicolon at the end of a statement triggers compiler errors. %/accordion% 去掉 there is/there are 使用 there is或there are的句子就像通用名词嫁给了通用动词。普通的婚礼让观众乏味。给读者真诚的“爱”，使用真正的主语和真实的动词吧。 最佳状况下，你只需简单删掉句子里的There is或There are（或许句子后再删除一两个其他词）即可。参考如下例句： There is a variable called met_trick that stores the current accuracy. 去掉There is，把真正的主语呈现出来。例如，以下任何一个句子都比原文更清晰： A variable named met_trick stores the current accuracy. The met_trick variable stores the current accuracy. 有时，你可以把真正的主语和动词从句末移动到句首来修复There be句子。例如，下面句子中代词you出现在句末： There are two disturbing facts about Perl you should know. 把There is替换成You是句子更佳明确。 You should know two disturbing facts about Perl. 其他情况下，作者是为了避免创建真正的主语和动词的麻烦，而使用了There is或There are。如果没有主语，那么就创建主语。例如，下面的There is语句没有标明接收实体： There is no guarantee that the updates will be received in sequential order. 通过将There is修改为更有意义的主语（例如clients），为读者创建更清晰的体验： Clients might not receive the updates in sequential order. 练习 通过去掉There is，让句意更加明确（你可以随意重排句子并增加、修改或删除单词）: There is a lot of overlap between X and Y. There is no creator stack for the main thread. There is a low-level, TensorFlow, Python interface to load a saved model. There is a sharding function named distribute that assigns keys. %accordion%点击展开答案%accordion% X and Y overlap a lot. The main thread does not provide a creator stack. TensorFlow provides a low-level Python interface to load a saved model. The distribute sharding function assigns keys. %/accordion% 减少某些形容词和副词的使用（Optional） 形容词和副词在小说和诗歌中大放异彩。 Thanks to adjectives, plain old grass becomes prodigal and verdant, while lifeless hair transforms into something lustrous and exuberant. Adverbs push horses to run madly and freely and dogs to bark loudly and ferociously.Unfortunately, adjectives and adverbs sometimes make technical readers bark loudly and ferociously. [!Note] 译注，为保证不破坏原意，上段并未翻译。 这是因为对技术文档的读者来讲，形容词和副词往往过于松散且主观。更为甚者，形容词和副词让技术文档听起来像营销材料一样危险。例： Setting this flag makes the application run screamingly fast. 诚然, \" screamingly fast\"能引起读者的注意，但并不是从好的一面。请给你的读者提供真实的数据而不是营销言论。你需要将没有确定性的形容词和副词修改为客观的数字信息。例如： Setting this flag makes the application run 225-250% faster. 这个修改是否剥夺了这句话的一些魅力？没错，是有一些，但是修改后的句子变得更准确和可信。 Reference 原文：https://developers.google.com/tech-writing/one/clear-sentences Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"TechnicalWriting/One-ShortSentences.html":{"url":"TechnicalWriting/One-ShortSentences.html","title":"Part One - Short Sentences","keywords":"","body":"Short sentences 出于以下原因，软件工程师通常会尽量减少实现中的代码行数： 较短的代码更容易他人阅读。 较短的代码比较长的代码更容易维护。 较长的代码往往会带来额外的Bug（做得越多错得越多）。 事实上，同样的规则也适用于技术文档写作： 较短的文档比较长的文档阅读速度更快。 较短的文档比较长的文档更容易维护。 额外的文档段落可能会带来额外的错误。 将文档修改得最短需要时间，但是这是完全值得的。短句子比长句子更有表达力，也更容易理解。 一句话专注一个观点 一个句子请专注一个观点、想法或者概念。就像程序的语句只执行一个任务一样，文档的一个语句应该仅表达一个观点。例如，下面这个很长的句子包含多个想法: The late 1950s was a key era for programming languages because IBM introduced Fortran in 1957 and John McCarthy introduced Lisp the following year, which gave programmers both an iterative way of solving problems and a recursive way. 将这个长句子分解成一系列单一想法的短句，得到如下结果： The late 1950s was a key era for programming languages. IBM introduced Fortran in 1957. John McCarthy invented Lisp the following year. Consequently, by the late 1950s, programmers could solve problems iteratively or recursively. 练习 将下列过长的句子转换为一系列短句。不要修改太多，仅将句子拆成多个短句。 In bash, use the if, then, and fi statements to implement a simple conditional branching block in which the if statement evaluates an expression, the then statement introduces a block of statements to run when the if expression is true, and the fi statement marks the end of the conditional branching block. %accordion%点击展开答案%accordion% In bash, use an if, then, and fi statement to implement a simple conditional branching block. The if statement evaluates an expression. The then statement introduces a block of statements to run when the if expression is true. The fi statement marks the end of the conditional branching block. (The resulting paragraph remains unclear but is still much easier to read than the original sentence.) %/accordion% 将长句转换为列表 许多冗长的技术文档语句，亟待被拆分成列表形式。例如以下句子： To alter the usual flow of a loop, you may use either a break statement (which hops you out of the current loop) or a continue statement (which skips past the remainder of the current iteration of the current loop). 当你在长句中看到连词or，请考虑使用项目符号列表来重构句子。如果你在长句中看到内嵌的任务列表，请使用项目符号列表(bulleted list)或有序列表(numbered list)来修改句子。例如，前面的示例使用了连词or，所以我们将这个长句转换为项目符号列表： To alter the usual flow of a loop, call one of the following statements: break, which hops you out of the current loop. continue, which skips past the remainder of the current iteration of the current loop. 练习 使用列表将下面的句子重构得更短更清晰。 To get started with the Frambus app, you must first find the app at a suitable store, pay for it using a valid credit or debit card, download it, configure it by assigning a value for the Foo variable in the /etc/Frambus file, and then run it by saying the magic word twice. KornShell was invented by David Korn in 1983, then a computer scientist at Bell Labs, as a superset of features, enhancements, and improvements over the Bourne Shell (which it was backwards compatible with), which was invented by Stephen Bourne in 1977 who was also a computer scientist at Bell Labs. %accordion%点击展开答案%accordion% Sentence 1 Take the following steps to get started with the Frambus app: Find the app at a suitable store. Pay for the app using a valid credit or debit card. Download the app. Configure the app by assigning a value for the Foo variable in the /etc/Frambus file. Run the app by saying the magic word twice. Sentence 2 The following two Bell Labs computer scientists invented popular shells: Stephen Bourne invented the Bourne Shell in 1977. David Korn invented the KornShell in 1983. The KornShell is a backwards-compatible superset of the Bourne Shell, containing many improvements over the older shell. %/accordion% 去除或减少无关单词 许多句子包含了一些填充词，它们是毫无营养又占用空间的“文本垃圾”。你是否可以在如下例句中找到不必要的单词： An input value greater than 100 causes the triggering of logging. 将 causes the triggering of logging改为更短的动词triggers，使句子变得更短： An input value greater than 100 triggers logging. 通过练习，你将会发现多余的单词，并体会到删除它们带来的巨大愉悦感。例如： This design document provides a detailed description of Project Frambus. 句子中 provides a detailed description of 可以修改为动词 describes 或 details。因此修改后的句子如下: This design document describes Project Frambus. 下表呈列一些常见臃肿语句的建议修改方法: Wordy Concise at this point in time now determine the location of find is able to can 练习 在不修改语义的前提下将下列句子变短： In spite of the fact that Arnold writes buggy code, he writes error-free documentation. Changing the sentence from passive voice to active voice enhances the clarification of the key points. Determine whether Rikona is able to write code in COBOL. Frambus causes the production of bugs, which will be chronicled in logs by the LogGenerator method. %accordion%点击展开参考答案%accordion% Although Arnold writes buggy code, he writes error-free documentation. 还可以是: Arnold writes buggy code. However, he writes error-free documentation. Changing the sentence from passive voice to active voice clarifies the key points. Determine whether Rikona can code in COBOL. Frambus produces bugs, which the LogGenerator method logs. %/accordion% 去除从句(Optional) 从句是一个句子中独立的逻辑单元，包含了一个主语和一个谓语。每个英文语句都包含以下内容： 一个主句 0个或者多个从句 从句修饰主句。顾名思义，从句不如主句重要。例如，考虑如下句子： Python is an interpreted programming language, which was invented in 1991. 主句: Python is an interpreted programming language 从句: which was invented in 1991 通常可以通过引出它们的词来识别从句。如下列表不完整地显示了引入从句的常用词： which that because whose until unless since 有些从句以逗号开头，有些则没有。下例中高亮的从句由because引入且没有逗号： I prefer to code in C++ because I like strong data typing . 修改时，始终坚持一句话阐述一个观点，仔细检测从句。从句是否只是对主句观点的引申，还是分支成新的观点？如果是后者，请考虑将有问题的从句拆分成独立的句子。 练习 确定下面句子中哪些包含从句，以及哪些从句应该要拆成独立的句子（不要重写句子，只需要判断其是否需要重写即可）。 Python is an interpreted language, which means that the language can execute source code directly. Bash is a modern shell scripting language that takes many of its features from KornShell 88, which was developed at Bell Labs. Lisp is a programming language that relies on Polish prefix notation, which is one of the systems invented by the Polish logician Jan Łukasiewicz. I don't want to say that Fortran is old, but only radiocarbon dating can determine its true age. %accordion%点击展开答案%accordion% 将从句高亮 Python is an interpreted language, which means that the language can execute source code directly . 从句只是对主句的引申，因此不用修改。 Bash is a modern shell scripting language that takes many of its features from KornShell 88 , which was developed at Bell Labs . 第一个从句是主句的引申，第二个从句则表达了新观点，需要拆成两个句子. Lisp is a programming language that relies on Polish prefix notation , which is one of the systems invented by the Polish logician Jan Łukasiewicz . 第一个从句明显对句子至关重要，但是第二个从句则不然，需要拆成两个句子. I don't want to say that Fortran is old, but only radiocarbon dating can determine its true age. 这个从句对句子至关重要，因此可以不动. %/accordion% 区分that和which That和which都会引出从句。它们的区别是什么？好吧，在某些国家，这两个词几乎可以互换。不过，警惕的美国读者不可避免地会愤怒地宣布，你又把这两个词弄混了。 在美国，which用于引出非必要的从句，而that引出的是对句子必不可少的从句。例如，下面句子中的关键信息是“Python是一种解释性语言“，如果没有Guido van Rossum invented也是成立的。 Python is an interpreted language, which Guido van Rossum invented. 反之，下面例句中don't involve linear algebra是必不可少的： Fortran is perfect for mathematical calculations that don't involve linear algebra. 如果你大声朗读一个句子，并在从句前听到停顿，那么which是你的不二选择。反之，选择that。返回并朗读一下上面的两个例句，在第一个句子中听到停顿了吗？ Which前需要加逗号，而that前不需要。 Reference 原文：https://developers.google.com/tech-writing/one/short-sentences Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"TechnicalWriting/One-ListNTables.html":{"url":"TechnicalWriting/One-ListNTables.html","title":"Part One - List and tables","keywords":"","body":"Lists and table 好的列表可以将混乱的技术文档变得有序。通常技术文档读者都喜欢列表。因此，写作时，请寻找机会将散乱的文字变成列表。 正确地选择列表 技术文档中的列表主要有以下三种形式： 项目符号列表（bulleted list） 数字列表（numbered list） 内嵌列表（embedded list） 对未排序的项目使用项目符号列表，对有序项目使用有序列表。换句话说： 对项目符号列表的项目做重排，列表的意义不会变化。 对数字列表的项目做重拍，则会修改列表的意义。 例如，如下列表是项目符号列表，重排列表的顺序并不会改变列表的意义： Bash provides the following string manipulation mechanisms: deleting a substring from the start of a string reading an entire file into one string variable 反之，下面这个列表必须是有序列表，如果改变其项目的顺序，该列表的意义也会变化： Take the following steps to reconfigure the server: Stop the server. Edit the configuration file. Restart the server. 内嵌列表（有时也称为run-in list）的项目直接写在句子里。下面这个例句中有一个包含4个项目的内嵌列表: The llamacatcher API enables callers to create and query llamas, analyze alpacas, delete vicugnas, and track dromedaries. 一般来说，内嵌列表是呈现技术信息的一种很糟糕的方式。应当将内嵌列表转化为项目符号列表或数字列表。例如，上述例句应该转换为如下段落： The llamacatcher API enables callers to do the following: Create and query llamas. Analyze alpacas. Delete vicugnas. Track dromedaries. 练习 将下列段落转换为1个或多个列表： Today at work, I have to code three unit tests, write a design document, and review Janet's latest document. After work, I have to wash my car without using any water and then dry it without using any towels. 不要忘记介绍你的列表。 %accordion%点击展开参考答案%accordion% 可能的答案如下： I must do the following at work today: Code three unit tests. Write a design document. Review Janet's latest document. After work, I must do the following: Wash my car without using any water. Dry my car without using any towels. 或者如下： I must do the following tasks today: At work: Code three unit tests. Write a design document. Review Janet's latest document. After work: Wash my car without using any water. Dry my car without using any towels. %/accordion% 保持列表项平行 有效列表和有缺陷列表的区别是什么？有效列表的表项是平行的，而缺陷列表项是不平行的。平行的列表中，列表项看起来就应该摆在一起。也就是说，所有的列表项在以下方面都是一致的： 语法 逻辑范畴 大小写 标点符号 反之，非平行的列表，在以上方面至少有一方面是不满足的。 例如，如下列表是平行列表。这是因为其所有列表项都是复数名词（语法）、可食用（逻辑分类）、小写（大小写）且没有句号或者逗号（标点符号）。 carrots potatoes cabbages 相反，如下列表在上述四项属性上并不一致: carrots potatoes The summer light obscures all memories of winter. 如下列表中，所有项目都是完整的句子，有着句子应该有的大小写和标点符号。因此该列表是平行列表： Carrots contain lots of Vitamin A. Potatoes taste delicious. Cabbages provide oodles of Vitamin K. 列表第一项的形式，决定了读者想要在后续项目看到的形式。 练习 如下列表是平行的还是非平行的？ Broccoli inspires feelings of love or hate. Potatoes taste delicious. Cabbages. %accordion%点击展开答案%accordion% 这是非平行列表：前两项是完整句子，第三项则不然。 %/accordion% 如下列表是平行的还是非平行的？ The red dots represent sick trees. Immature trees are represented by the blue dots. The green dots represent healthy trees. %accordion%点击展开答案%accordion% 这是非平行列表：第一项和第三项是主动语态，第二项是被动语态。 %/accordion% 有序列表项使用祈使动词起头 有序列表项应该使用祈使动词起头。就像open或者 start一样，祈使动词是命令。请看如下例句中，所有的列表项如何以祈使动词开头: Download the Frambus app from Google Play or iTunes. Configure the Frambus app's settings. Start the Frambus app. 如下有序列表不是平行列表，因为只有前两句以祈使动词开头： Instantiate the Froobus class. Invoke the Froobus.Salmonella() method. The process stalls. 练习 将如下列表改为平行列表，确保所有的列表项都以祈使动词开头： Stop Frambus The key configuration file is /etc/frambus. Open this file with an ASCII text editor. In this file, you will see a parameter named Carambola, which is currently set to the default value (32). Change this value to 64. When you are finished setting this parameter, save and close the configuration file now, start Frambus again. %accordion%点击展开答案%accordion% Stop Frambus. Open the key configuration file, /etc/frambus, with an ASCII text editor. Change the Carambola parameter from its default value (32) to 64. Save and close the configuration file. Restart Frambus. %/accordion% 表项中合理使用标点 如果列表项是句子，那么请按照句子规范使用标点和大小写。反之则不然。例如，如下列表项是一个句子，所以我们将Most的M大写，并在句末加上句号： Most carambolas have five ridges. 然而，如下列表项并非句子，所以the中的t无需大写，且无需使用句号： the color of lemons 创建有用表格 分析性思维热爱表格。给定一个包含多个段落和一个表格的页面，工程师的眼睛会聚焦在表格上。 创建表格请考虑以下准则： 选择有意义的列标题，不要让读者自己猜测每一列的内容。 避免在单元格内放入过多文本。如果单元格内有多于两个句子，请问问自己是否这些信息应该以其他形式存在。 尽管不同列可以包含不同类型的数据，但也请尽量保证每列内容的并行性。例如，某一列的单元格不能既有数据信息也有著名的马戏团演员。 ![Note] 不是所有的表格都能很好地做到自适应。例如，有的表格在笔记本上能完美呈现，但是在手机上却看起来糟糕透了。 介绍每个列表和表格 我们建议你使用一句话来介绍每个列表和表格，告诉读者这个列表和表格呈现的是什么内容。即，给出列表或表格的上下文。同时，使用冒号而不是句号为介绍性句子结尾。 虽非必须，我们还是建议你可以在介绍句中加入单词following，就像如下例句： The following list identifies key performance parameters: Take the following steps to install the Frambus package: The following table summarizes our product's features against our key competitors' features: 练习 为如下表格写一个介绍句： Languages Inventor Year Introduced Key Feature Lisp John McCarthy 1958 recursion C++ Bjarne Stroustrup 1979 OOP Python Guido van Rossum 1994 simplicity %accordion%点击展开答案%accordion% 可能的答案如下： The following table contains a few key facts about some popular programming languages: 或者 The following table identifies the inventor, year of invention, and key feature of three popular programming languages: %/accordion% Reference 原文：https://developers.google.com/tech-writing/one/lists-and-tables Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"TechnicalWriting/One-Paragraphs.html":{"url":"TechnicalWriting/One-Paragraphs.html","title":"Part One - Paragraphs","keywords":"","body":"Paragraphs 本单元提供了一些如何构建连贯段落的要点。先参考如下启发性的信息： 写作工作不过就是理清主题各部分间的依赖关系，并按照一定的逻辑顺序将这些内容呈现给读者，使读者能够理解你。 写好段首句 段首句是每个段落最重要的句子。忙碌的读者会专注于段首句而有时会跳过其余的句子。因此，请将你的写作精力集中在段首句上。 好的首句会点出段落的核心观点。例如，以下段落就有一个有效的首句: A loop runs the same block of code multiple times. For example, suppose you wrote a block of code that detected whether an input line ended with a period. To evaluate a million input lines, create a loop that runs a million times. 上述段落的首句将段落的主题确立为对循环的介绍。相比之下，如下段首句则将读者引向了错误的方向： A block of code is any set of contiguous code within the same function. For example, suppose you wrote a block of code that detected whether an input line ended with a period. To evaluate a million input lines, create a loop that runs a million times. 练习 如下段落的首句是有效的还是有缺陷的？ The Pythagorean Theorem states that the sum of the squares of both legs of a right triangle is equal to the square of the hypotenuse. The k-means clustering algorithm relies on the Pythagorean Theorem to measure distances. By contrast, the k-median clustering algorithm relies on the Manhattan Distance. %accordion%点击展开答案%accordion% 该段首句是有缺陷的，因为其暗示着段落将专注于介绍勾股定理（毕达哥拉斯定理）。但实际上，该段重点是介绍聚类算法。如下则是一个更有效的首句： Different clustering algorithms measure distances differently. %/accordion% 每段专注一个主题 一个段落应该代表一个独立的逻辑单元。将每个段落限制在当前主题上，而不要描述为未来或过去的主题是什么。修改时，可以简单粗暴地删掉任何与当前主题不直接相关的句子（或将其移至其他段落）。 例如，假设如下段落的首句有专注正确的主题。你能找出应该从下一段中删除的句子吗？ The Pythagorean Theorem states that the sum of the squares of both legs of a right triangle is equal to the square of the hypotenuse. The perimeter of a triangle is equal to the sum of the three sides. You can use the Pythagorean Theorem to measure diagonal distances. For example, if you know the length and width of a ping-pong table, you can use the Pythagorean Theorem to determine the diagonal distance. To calculate the perimeter of the ping-pong table, sum the length and the width, and then multiply that sum by 2. 我们删除了第二句和第五句，以产生一个专注于勾股定理的段落。 The Pythagorean Theorem states that the sum of the squares of both legs of a right triangle is equal to the square of the hypotenuse. The perimeter of a triangle is equal to the sum of the three sides. You can use the Pythagorean Theorem to measure diagonal distances. For example, if you know the length and width of a ping-pong table, you can use the Pythagorean Theorem to determine the diagonal distance. To calculate the perimeter of the ping-pong table, sum the length and the width, and then multiply that sum by 2. 练习 将下面段落中无关的句子移除（假设段首句确实为段落建立了所需的主题）: Spreadsheets provide a great way to organize data. Think of a spreadsheet as a table with rows and columns. Spreadsheets also provide mathematical functions, such as means and standard deviations. Each row holds details about one entity. Each column holds details about a particular parameter. For example, you can create a spreadsheet to organize data about different trees. Each row would represent a different type of tree. Each column would represent a different characteristic, such as the tree's height or the tree's spread. %accordion%点击展开答案%accordion% 该段落侧重于将电子表格作为一种组织数据的方式，但第三句话与主题有所偏离。将第三句移到关于电子表格数学运算的段落中会更好： Spreadsheets provide a great way to organize data. Think of a spreadsheet as a table with rows and columns. Spreadsheets also provide mathematical functions, such as means and standard deviations. Each row holds details about one entity. Each column holds details about a particular parameter. For example, you can create a spreadsheet to organize data about different trees. Each row would represent a different type of tree. Each column would represent a different characteristic, such as the tree's height or the tree's spread.%/accordion% 段落不宜过长或过短 长段落在视觉上令人望而生畏。超长的段落变成是令读者忽略的可怕“文字墙”。读者普遍欢迎包含三到五个句子的段落，但会避免包含大约7个句子的段落。修改时，可以将很长的段落分成两个单独的段落。 相反地，也不要让段落过短。文档中包含大量的单句段落，代表文档的组织是有缺陷的。请找到方法将这些短句段落组合成有凝聚力的多句段落或者列表。 回答what, why和how 好的段落能回答以下三个问题： 你想告诉读者什么（What are you trying to tell your reader）? 为什么读者需要知道这些（Why is it important for the reader to know this）? 读者该如何利用这些知识，或读者怎么知道你的观点是正确的（How should the reader use this knowledge? Alternatively, how should the reader know your point to be true）? 例如，如下段落就回答了 what, why和how： >The garp() function returns the delta between a dataset's mean and median. Many people believe unquestioningly that a mean always holds the truth. However, a mean is easily influenced by a few very large or very small data points. Call garp() to help determine whether a few very large or very small data points are influencing the mean too much. A relatively small garp() value suggests that the mean is more meaningful than when the garp() value is relatively high. Reference 原文: https://developers.google.com/tech-writing/one/paragraphs Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"TechnicalWriting/One-Audience.html":{"url":"TechnicalWriting/One-Audience.html","title":"Part One - Audience","keywords":"","body":"Audience 课程设计者认为你对数学公式已非常习惯。因此，本单元始于如下等式： 好的文档 = 受众完成任务所需的知识和技能，即受众当前的知识和技能 换句话说，文档应该提供受众需要但未知的信息。因此，本单元主要内容为： 定义文档的受众。 确定受众要学习的内容。 为你的受众量身而写文档。 确定受众 严谨的文档作者会花大量时间和精力来定义受众。包括做调研、用户体验研究、焦点小组(focus groups)和文档测试。你可能没有那么多时间做完这些事情，故本单元教你一些更简单的方法。 首先确定受众的角色，可能的角色包括： 软件工程师 技术、非工程师角色（技术软件经理） 科学家们 科学领域的专家（例如，医生） 工科专业本科生 工科专业研究生 非技术职位 我们很高兴看到许多非技术职位的人有着不错的技术和数学能力。但是确定受众角色仍是定义受众的一阶近似值。同一角色的人通常有着相同的基本知识和技能。例如： 大部分软件工程师都知道流程的排序算法，大 O(*)复杂度表示法和至少一个编程语言。因此，你大可相信软件工程师知道 O(n) 的意义，但对非技术角色则不然。 针对医生的科研报告，与针对非专业受众的报纸文章看起来是完全不同的。 教授对研究生介绍的新机器学习算法的解释，应该不同于对一年级本科生的解释。 如果所有相同角色的每个人都有完全相同知识和水平，写作会容易得多。不幸的是，即使同样的角色，其知识范围也相差甚远: Amal是Python的专家，而Sharon是C++的高手，Micah则更擅长Java。Kara喜欢Linux，David则只熟悉iOS。 因此，角色并不足以定义受众。也就是说，同时也要确定受众的知识范畴。Frombusx项目的工程师可能对相关的Dingus项目有所了解，但对无关的Carambola项目一无所知。普通心脏专家比软件工程师会更了解耳朵的问题，但远不如听力学家。 受众分析范例 如下是虚构项目Zylmon的受众分析范例： 项目Zylmon的目标受众角色如下： 软件工程师 技术产品经理 目标受众的知识分析如下： 目标受众熟悉Zyljeune API，跟Zylmon API相似。 目标受众熟悉C++，但是没有使用过新的 Winged Victory开发环境构建过C++项目。 目标受众在大学学过线性代数，但是大部分团队成员需要重新了解矩阵乘法。 确定受众需要学习的内容 请列出目标受众需要学习哪些内容以实现文档目标的清单。某些情况下，列表需要包含受众需要执行的“任务”。例如： After reading the documentation, the audience will know how to do the following tasks: Use the Zylmon API to list hotels by price. Use the Zylmon API to list hotels by location. Use the Zylmon API to list hotels by user ratings. 请注意，受众有时必须按特定顺序来掌握文档内容。例如，受众在学习编写程序前，需要先学会在新的开发环境下编译和执行程序。 如果你正在编写的是一个设计文档，那么你的列表应该专注于受众需要学习的信息，而不是要执行的“任务”。例如： After reading the design spec, the audience will learn the following: Three reasons why Zylmon outperforms Zyljeune. Five reasons why Zylmon consumed 5.25 engineering years to develop. 为受众量身打造文档 根据受众的需求而写作，需要无私的同理心。你对文档内容的解释，需要满足的是受众的好奇心，而不是你自己的。如何跳出自我，让你的文档去适配受众？不幸的是，并没有简单的答案，只能给你提供一些规范供参考。 词汇和概念 让文档使用的词汇与受众匹配。请参阅Words寻求帮助。 “亲近”你的受众。你团队内的成员可能了解你团队的通用缩写，但是其他团队的人是否了解？当受众范围更大时，你需要做更多说明。 相似的，你软件团队中的老手可能了解团队项目的实现细节以及数据结构，但是其他所有人包括团队新成员都不了解。除非文档本就是为团队中的老手而写，否则你通常必须做比你预期更多的解释。 “知识诅咒” 专家经常遭受“知识诅咒”(the curse of knowledge)。这意味着专家对一个主题懂得越多，反而会让他们对新手更难做解释。作为专家，你很容易忘记新手并不知道你已经知道的内容。新手既不理解会引用到一些微妙交互的解释，也不明白专家不愿意停下来加以解释的复杂系统。 从新手的角度看，“知识诅咒”是由于模块未编译而导致的“File not found”链接错误。 练习 假设下面段落是一篇论文的开头，目标受众为从未编过程的医生。找到段落中遭受“知识诅咒”的部分。 C is a mid-level language, higher than assembly language but lower than Python and Java. The C language provides programmers fine-grained control over all aspects of a program. For example, using the C Standard Library, it is easy to allocate and free blocks of memory. In C, manipulating pointers directly is mundane. 若该段是针对计算机科学专业的本科生，熟悉Python但是刚接触C，它还遭受“知识诅咒”吗？ %accordion%点击展开答案%accordion% 这个段落深受“知识诅咒”。目标受众从未做过编程，所以以下术语对他们不熟悉或者不恰当： language mid-level language assembly language Python Java program C Standard Library allocate and free blocks of memory pointers 尽管受众是计算机专业类的研究生，这一段同样遭受“知识诅咒”。Python的程序员一般来讲是不知道指针和内存操作的。更好的介绍性段落中，可以增加C语言和Python的比较和对比。 %/accordion% 使用简单词汇 英语已成为全球技术交流的主要语言。然而，相当一部分的技术读者更习惯于英语外的其他语言。因此，请使用简单的词汇而不是复杂词汇，更不要使用过时的词汇或者过于复杂的英语词汇。Sesquipedalian之类的罕见单词会让读者反感。 文化中立及习语 保持你的写作文化中立。不应该让受众在了解软件的工作原理前，还要去了解NASCAR、板球或相扑。如下例句就充满了美国的棒球比喻，就像苹果派一样，会让巴黎的读者摸不着头脑： If Frambus 5.0 was a solid single, Frambus 6.0 is a stand-up double. 习语指的是整体含义与短语中单个单词字面含义不同的短语。例如，如下短语就是习语： a piece of cake Bob's your uncle Cake? Bob? 大多数美国的读者都认可第一句话的含义，而大多数英国读者会知道第二句话的意思。如果你的受众只是英国人，那么Bob's your uncle是OK的。然而，如果你的受众来自全球，请将该习语写成this task is done。 习语在我们日常对话中如此常见，以至于习语的特殊非字面含义，对我们来讲变得不可见。也就是说，习语是另外一种形式的“知识诅咒”。 注意，一些受众可能会使用翻译软件来阅读文档。使用一些特殊文化用语或者习语，比起使用直接简单的英文，会让翻译软件更加“抓狂”。 练习 找出下列句子的问题： As of Version 3.0, it was still kosher to call the Frambus method. Deciding which BlogResource constraints are combinable is a sticky wicket. Be that as it may, you still have to write unit tests. %accordion%点击展开答案%accordion% 犹太洁食（kosher）在世界一些地方已经成为俚语，代表“可接受的用法”。但是更多的人会奇怪，宗教饮食法跟软件有什么关系？ sticky wicket是英国俚语，并没有被广泛使用。请将其替换成challenging problem Be that as it may是俚语，把它改成However即可。 %/accordion% Reference 原文: https://developers.google.com/tech-writing/one/audience Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"TechnicalWriting/One-Documents.html":{"url":"TechnicalWriting/One-Documents.html","title":"Part One - Documents","keywords":"","body":"Documents 你可以写出句子，也可以用句子组成段落。你能将这些段落组织成连贯且一致的文档吗？ 声明文档范围 一篇好的文档从定义其范围开始。例如： This document describes the design of Project Frambus. 一篇更好的文档，还会定义其未覆盖的范围，目标受众可能合理地期望你的文档说明其未涵盖的主题。例如： This document does not describe the design for the related technology, Project Froobus. 涵盖以及未涵盖范围声明不仅有利于读者，也对作者本人有益。当写作时，若文档内容偏离了涵盖声明时（或讨论到未涵盖的范围时），那么你必须重新将文档内容聚焦在声明的范围内、或者修改范围声明。在审阅文档初稿时，删除任何与覆盖范围无关的部分。 练习 下面段落有什么问题？ This document explains how to use the Frambus API to create, update, and publish Fwidgets. This document does not explain how to use the Frambus API to delete Fwidgets or cover the history of the Linux operating system. %accordion%点击展开答案%accordion% 未涵盖声明包含的应该是读者可能会预期文档涵盖的内容。没有理智的读者会预期本文档还要介绍Linux操作系统的历史。 %/accordion% 声明受众 好的文档应该明确声明其受众。例如： This document is aimed at the following audiences: Software Engineers Program Managers 除了受众角色外，好的受众声明还会指定任何先决知识或经验。例如： This document assumes that you understand matrix multiplication and the fundamentals of backpropagation. 某些情况下，受众声明还需要指出读本文前需要先预读的课程。例如： You must read \"Project Froobus: A New Hope\" prior to reading this document. 段首即总结关键点 工程师和科学家都是大忙人，可能没有时间读完你76页整的设计文档。想象以下，和你一样的这群人可能只会读你文档的第一段。因此，请确保文首会回答读者的核心问题。 有经验的文档作者将大量精力集中在第一页上，以增加读者进入第二页的几率。然而，任何长文档的开头都是最难写的一页。因此，请做好多次修改第一页的思想准备。 比较和对比 无论你多么有创造力，在你的职业生涯中，你也只会写出极少量的真正具有革新性内容的文档。你的大部分工作只是在现有的技术和概念上演进。因此，在文档中将你的想法与读者已知的概念做比较和对比。例如： This new app is similar to the Frambus app, except with much better graphics. 或 The Froobus API handles the same use cases as the Frambus API, except that the Froobus API is much easier to use. 练习 下面的说明段落有什么问题？ Frambus Weather app v2 introduces ten features not available in Frambus Weather app v1. Most importantly, v2 offers two-week forecasts, v1 offered only one-week forecasts. Tidal information won't change. %accordion%点击展开答案%accordion% 最后一句话（关于潮汐）没有重要到出现在开头的段落。第一句话提到了有10个新功能，因此读者可能希望了解更多关于这些新功能的信息。然而，最后一句话介绍了新功能以外的东西。 %/accordion% 为受众写作 本课程反复强调定义的重要性。在本节中，我们重点关注受众定义如何成为组织文档的一种方式。 确定受众需求 回答以下问题，可帮助您确定文档应包含的内容：： 目标受众是谁？ 目标受众的目标是什么？为什么他们要读这个文档？ 在读这篇文档前哪些是他们已知的？ 读完这篇文档后，读者可以知道或学会做什么？ 例如，假设你发明了一个类似快速排序的新排序算法，如下列表包含了针对上述问题的一些潜在回答： 目标受众是谁？组织内的所有软件工程师。 目标受众的目标是什么？目标受众的目标是更有效数据排序方式。他们读这篇文档以确定新排序算法是否值得实作。 在读这篇文档前哪些是他们已知的？目标受众知道如何编程，也学习过各种排序算法（包括快速排序）。然而，他们已经很多年没有实作或者评估过排序算法了。 读完这篇文档后，读者可以知道或学会做什么？读完文档后，目标受众将可以做以下所有事情： 了解新算法和快速排序算法对比信息。 了解新算法优于快速排序的两种数据集。 使用他们熟悉的编程语言来实作新算法。 了解到新算法表现不佳的两种边际条件。 组织文档满足受众需求 在定义了受众的需求之后，组织文档以帮助读者获得他们需要的信息。例如，根据上一节的答案，文档的大纲可能如下所示： Overview of the algorithm Compare and contrast with quicksort, including Big 0 comparisons Link to wikipedia article on quicksort Optimal datasets for the algorithm Implementing the algorithm Implementation in pseudocode Implementation tips, including common mistakes Deeper analysis of algorithm Edge cases Known unknowns Reference 原文: https://developers.google.com/tech-writing/one/documents Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"TechnicalWriting/One-Punctuation.html":{"url":"TechnicalWriting/One-Punctuation.html","title":"Part One - Punctuation(Optional)","keywords":"","body":"Punctuation(Optional) 本可选单元对标点符号做一个快速复习。 逗号 编程语言对符号有着明确的强制规则。相比之下，在英语中，关于逗号的使用规则却有些模糊。简单的指导方针是，在一句话中读者会自然停顿的任何位置加上逗号。用音乐的术语讲，如果句号是全音符休止符，那么逗号可能是半音符或四分音符休止符。换句话说，逗号的停顿短于句号。例如，如果大声朗读以下句子，你可能会在单词just前做简短停顿： C behaves as a mid-level language, just a couple of steps up in abstraction from assembly language. 有些情况是必须使用逗号的。例如，逗号作为内嵌列表项目的分隔: Our company uses C++, Python, Java, and JavaScript. 你可能会想，上面例句中，列表的第N-1和第N项之间的最后一个逗号是否应该存在。这个逗号( 叫做serial comma或者Oxford comma )是有争议的。我们建议机上这个逗号，单单是因为技术写作需要选择最不容易造成混淆的方案。尽管如此，我们实际上更倾向于使用项目符号列表而不是内嵌列表，以此规避争议。 在条件状语从句中，应当使用逗号来区隔条件和结果。例如，如下两句中逗号的使用都是正确的： If the program runs slowly, try the --perf flag. If the program runs slowly, then try the --perf flag. 你也可以使用两个逗号对名词做快速的定义或解释，例如： Python, an easy-to-use language, has gained significant momentum in recent years. 最后，避免使用逗号来连接两个各自独立的想法。例如，如下句子使用逗号做分隔，犯下了“逗号分隔重罪”（comma splice）。 [!DANGER|label: Not Recommended] Samantha is a wonderful coder, she writes abundant tests. 应使用句号而不是逗号来分隔两个独立的想法。例如： [!TIP|label: Recommended] Samantha is a wonderful coder. She writes abundant tests. 练习 在下列段落合适的位置添加逗号： Protocol Buffers sometimes known as protobufs are our team's main structured data format. Use Protocol Buffers to represent store and transfer structured data. Unlike XML Protocol Buffers are compiled. Consequently clients transmit Protocol Buffers efficiently which has led to rapid adoption. 提示：大声朗读句子，在听到简短停顿的位置增加逗号。 %accordion%点击展开答案%accordion% Protocol Buffers, sometimes known as protobufs, are our team's main structured data format. Use Protocol Buffers to represent, store, and transfer structured data. Unlike XML, Protocol Buffers are compiled. Consequently, clients transmit Protocol Buffers efficiently, which has led to rapid adoption. %/accordion% 分号 句号分隔不同的想法; 而分号将高度相关的想法连接起来。例如，请注意以下句子中的分号如何将第一个和第二个想法结合起来的： [!TIP|label: Recommended] Rerun Frambus after updating your configuration file; don't rerun Frambus after updating existing source code. 使用分号前问问自己，如果将分号前后的子句交换，是否仍能读得通。例如，前文做如下修改仍是有效的： Don't rerun Frambus after updating existing source code; rerun Frambus after updating your configuration file. 分号前后的子句在语法上应该仍是完整的句子。例如，如下句子中分号后的句子是一个从句而不是完整的句子，因此这里分号的使用是不正确的： [!DANGER|label: Not Recommended] Rerun Frambus after updating your configuration file; don't rerun Frambus after updating existing source code. 应该改为： [!TIP|label: Recommended] Rerun Frambus after updating your configuration file, not after updating existing source code. 正如本课程之前所提，技术文档写作通常更倾向于使用项目符号列表而不是内嵌列表。然而，如果你一定要用内嵌列表，请使用逗号而不是分号分隔项目项目。例如： [!TIP|label: Recommended] Style guides are bigger than the moon, more essential than oxygen, and completely inscrutable. 许多句子会在分号后放一个过渡词或短于。这种情况下，转接词或短语后应该跟一个逗号。例如： Frambus provides no official open source package for string manipulation; however, subsets of string manipulation packages are available from other open source projects. 或者： Even seemingly trivial code changes can cause bugs; therefore, write abundant unit tests. 练习 如下句子哪些句号或者逗号要被替换成分号？ Python is a popular programming language. The C language was developed long before Python. Model learning for a low value of X appears in the top illustration. Model learning for a high value of X appears in the bottom illustration. I'm thankful for my large monitor, powerful CPU, and blazing bandwidth. %accordion%点击展开答案%accordion% 不能换成分号，因为这两句话关联性不强。 可以将第一个句号换成分号，因为这两句话关联性很强。 因为是内嵌列表，需要用逗号而不是分号分隔。 %/accordion% Em破折号(Em-Dashes) Em破折号是引人注目的标点符号，使用上有着丰富的可能性。Em破折号代表着比逗号更长的停顿--一个更长的中断。如果逗号是四分音符休止符，那么Em破折号就是二分音符休止符。例如： C++ is a rich language—one requiring extensive experience to master. 文档作者有时使用一对Em破折号来包住“题外话”，例如： Protocol Buffers—often nicknamed protobufs—encode structured data in an efficient yet extensible format. 前文示例中可以使用逗号来代替Em破折号吗？当然可以。那为什么还要使用Em破折号呢？感觉、艺术、经验。 En破折号(En-dashes)和连字符 看下表中的水平(horizontal)标点符号： Name Mark Relative width em-dash — 最宽(一般和字母m等宽) en-dash – 中等 (通常和字母n等宽) hyphen - 最窄 在一些特定用法中，有些写作风格指南会推荐使用en-破折号。但是Google Style Guide提供了直截了当的建议如下： 不要用它。 连字符(hyphen)则有点难办。在技术文档写作中，连字符要作为复合单词的连接符，例如： self-attention N-gram 令人疑惑的是，三个词以上组成的复合词，通常会在第一个和第二个词中间增加连字符，而不是在第二个和第三个词中间。例如： decision-making system floating-point feature 若对连字符的使用有疑惑，请查找字典、词汇表或写作风格指南。 [!Note] 如果你查阅不止一本关于连字符的字典、词汇表或者写作风格指南，你可能会碰到不同的说法。 括号 将次要观点或者与主题相关性不大的内容放到括号内。括号告诉读者，其内的文字不并不重要。因此有些作者认为，括号内的内容甚至不应该出现在文档中。作为折中，技术文档应该最小限度地使用括号。 句点和括号同时出现时的相关规则一直不是很明确。如下是标准规则： 如果括号内包含完整的句子，句点应该放在括号内。 如果括号是句子的结尾，但不包含整个句子，句点应该放在括号外。 例如： (Incidentally, Protocol Buffers make great birthday gifts.) Binary mode relies on the more compact native form (described later in this document). Reference 原文: https://developers.google.com/tech-writing/one/punctuation Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"TechnicalWriting/One-Summary.html":{"url":"TechnicalWriting/One-Summary.html","title":"Part One - Summary","keywords":"","body":"Summary 涵盖了以下写作的基本课程： Reference 原文: https://developers.google.com/tech-writing/one/summary Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"TechnicalWriting/Two-Introduction.html":{"url":"TechnicalWriting/Two-Introduction.html","title":"Part Two - Introduction","keywords":"","body":"Introduction 的目标是帮助技术人员提升其技术沟通能力。 目标受众 本课程的目标受众是完成了系列课程的，且希望得到更多技术写作相关训练的人员。如果你从未接受过任何技术写作培训，建议你先完成系列课程。 学习目标 本课程侧重于技术写作的几个中级主题。学完本课程后，你将学会如下内容： 选择几种不同的策略来编写初稿，并使用更多技巧来编写第二稿和第三稿。 使用几种技术来检查自己写作中的错误。。 对大型文档进行组织。 介绍文档的范围以及先决条件。 如何写出清晰的图示标题。 技术插图中合理地选择信息密度。 吸引读者注意力到插图上。 使用“大图”阐述建立上下文。 有效地修改技术图示。 创建有用的、精确的、简洁的、清晰的、可重用的以及合理注释的示例代码。提供示例代码集应该有不同的难度，来帮助不同层次的读者理解。 区别不同的文档类型。 讨论任何问题。 [!NOTE] 译注，原文是Describe just about anything。含义应该是文档尽量保证完整面面俱到。 对读者中的初学者抱有同理心，并为他们写手册。 成为一名优秀的工程师或优秀的技术作家需要多年的专注实践。本课程将提高您的技术写作能力，但不会立即将您转变为出色的技术写作专家。 课前和课上内容 课程由以下两个部分组成： 课前内容 课上内容 本文档是课前材料。课上内容是课前材料内容的增强。尽管如此，课前内容还是非常有价值的材料。 Reference 原文： https://developers.google.com/tech-writing/two Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"TechnicalWriting/Two-Self-editing.html":{"url":"TechnicalWriting/Two-Self-editing.html","title":"Part Two - Self-editing","keywords":"","body":"Self-editing 想象一下，您刚刚编写了文档的初稿。 你如何让它变得更好？ 在大多数情况下，最终发布的文档是一个迭代过程。 将空白页转换为初稿通常是最困难的一步。 撰写初稿后，请确保留出足够的时间来完善您的文档。 本单元中的编辑技巧可以帮助您将初稿转变为更清晰地传达受众所需信息的文档。 使用一个技巧或全部使用； 重要的是找到一个适合你的策略，然后让这个策略成为你写作程序的一部分。 选取写作风格 公司、组织和大型开源项目经常会采用现有的或编写自己的文档样式指南。Google Developers 网站上的许多文档项目都遵循使用Google开发者文档样式指南。如果你之前完全没有遵照过任何一个文档风格指南，乍一看Google开发者文档样式指南可囊看起来有点吓人，它对语法、标点、格式以及计算机接口界面都有严格要求。你可以先参考文档风格要求的重点部分开始你的写作。 重点部分的一些内容，在进行了介绍。比如说你可能还记得如下一些技巧： 使用主动语态来标记主语。 使用有序列表来呈列有顺序步骤的项目。 使用项目符号列表来呈列其他类型的项目。 重点部分的也列出了一些写作技术文档的其他技巧，例如： 使用第二人称写作. 将受众称为“你”而不是“我们”. 句子中将条件子句放在前，而不是之后. 将与代码相关的文本格式化为代码字体. 像读者一样思考 你的受众是谁？后退一步，尝试从他们的角度出发重读你的草稿。确保你的文档目标明确，并为读者可能不熟悉的任何术语或概念提供定义。 为您的受众勾勒出一个人格面具可能会有所帮助。人格面具可以由以下任何属性组成： 读者的角色。例如，系统工程师或者测试工程师。 最终目标。例如，恢复数据库。 对读者知识背景或者经验的假设。例如： 熟悉Python。 使用Linux操作系统。 可以舒适地使用命令行进行操作。 代入这样的“人格面具”来检查你的草稿。在文档中列出你的一些假设，对受众理解文档尤其有帮助。你可以提供资源的链接，以便于他们复习某个特定主题时了解更多信息。 请注意，过分依赖一到两个“人格面具”会导致文档内容过于狭隘，无法大部分读者有用。 参看的Audience自学单元来回顾和了解有关读者的信息。 大声朗读 由于不同的背景，你的写作风格可能疏远或吸引读者，甚至使你的读者厌烦。文档该呈现什么样的风格，一定程度上取决于受众。例如，旨在招募项目贡献者的新开源项目的贡献者指南，可能采用非正式且更口语化一点的风格。而商业软件的开发者指南会采用更正式的风格。 大声朗读你的草稿，以此来检查文档是否是口语化的。注意那些尴尬的措辞，过长的句子，或任何其他感觉不自然的东西。你也可以使用屏幕阅读器为你朗读文档。 了解更多信息，可以参考风格和作者语气一文。 稍后再看 写完文档的初稿（或二稿、三稿）后，先将其放在一边。在一个小时后（或两三个小时候）再来读你的草稿，你几乎总能找到一些可以改进的部分。 换个环境 一些作者习惯于将文档打印出来，并用红笔标注的方式来检查草稿。通过对阅读环境的变化，你也可以检查出可以改进的地方。对于这个经典技巧的一种现代诠释是，你可以将草稿拷贝到另外一个文档内，修改文本的字体、大小和颜色。 找到同行“编辑” 正如工程师需要其他同行帮忙检查代码一样，文档作者也需要同行“编辑”给予反馈。请人帮你审阅文档，提出具体的建设性意见。您的同行“编辑”不需要是文档技术主题方面的专家，但至少要对你文档遵循的风格是熟悉的。 习题 如果你手头有一个正在处理的文档，使用本单元的技巧来优化它。若没有，可以尝试着对下面这段话进行优化： Determine whether or not you can simplify your document through the use of terminology that is equivalent but relatively shorter in length and therefore more easily comprehensible by your audience. It's important to make sure your document is edited before it is seen by your audience, which might include people that are less or more familiar with the matter covered by your document. The first thing you need is a rough draft. Some things that can help make your document easier to read are making sure you have links to background information, and also checking for active voice instead of passive voice. If you have long sentences you can consider shortening them or implementing the use of a list to make the information easier to scan. Reference 原文：https://developers.google.com/tech-writing/two/editing Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"TechnicalWriting/Two-OrganizeLargeDoc.html":{"url":"TechnicalWriting/Two-OrganizeLargeDoc.html","title":"Part Two - Organizing large docs","keywords":"","body":"Organizing large documents 如何将大量的信息组织成连贯一致有逻辑的文档或者网站？或者说，如何将一个混乱的文档或网站变得更容易理解，更为有用？如下技巧可以帮你： 将一个大的文档拆成文档集。 重新组织文档。 为文档增加目录导航。 逐步披露信息。 何时该写大文档 你可以将一系列信息组织成较长的独立文档或一组较短的相互关联的文档。相互关联的短文档通常以网站、WiKi或者类似的结构发布。 有的读者对较长文档的态度更为积极。假设为两个假设读者来编写文档，他们的观点如下： Hong觉得长篇文档读起来既困难又让人迷惑，他更喜欢使用网站的查找功能来查找问题的答案。 Rose很擅长阅读大型文档，经常使用浏览器的内置页面搜索功能在当前页面中查找有用的信息。 所以，是将文档写成单个文档，还是网站上的一组文档？可以参考如下准则： 操作指南、介绍性概述和概念性指南，在针对该主题的新手时，通常较短的文档效果会更好。例如，对你的主题完全陌生的读者，可能难以记住许多新术语、概念和事实。请记住，你的读者阅读你的文档，可能是为了快速了解该主题。 深入性教程、最佳实践指南和命令行参考页面可以写成较长的文档，尤其是当你的目标读者是已经对该工具或主题有一定经验的人时。 一个出色的教程，可以通过叙述，指引读者在完成较长文档内的一系列相关任务。然而，即使是大型教程，有时也可以通过将其拆成更小的部分受益。 许多较长的文档，并非旨在只被阅读一次。例如，用户经常会在参考页面检索对某个命令或者标志的解释。 本单元的其余部分涵盖可用于编写例如教程或概念指南的较长文档的技巧。 对文档进行组织 本节介绍了规划较长文档的一些技巧，包括创建大纲或起草序言。写完文档的初稿后，你可以对照大纲和序言来审阅你的文档，以此确保你没有漏掉一些最初打算涵盖的内容。 创建文档大纲 首先创建结构性大纲，可以帮你对文档分组，并帮你确定哪个地方需要呈现更多细节。与此同时，大纲可以让你在真正动手写作前，方便地调整各主题的位置。 可以将大纲作为文档的简单叙述。编写大纲没有标准的方法，但以下指南提供了可能对你有用的实用技巧： 在要求读者执行某个任务前，请先解释为什么他们要做这个。例如，如下项目符号列表是一个审查和改进网页可访问性教程的大纲： Introduce a browser plugin that audits the accessibility of web pages; explain that the reader will use the results of the audit report to fix several bugs. List the steps to run the plugin and audit the accessibility of a web page. 将大纲的每个步骤限定在描述某个概念或完成某个特定的任务。 构建大纲，以确保在文档介绍的是与读者最相关的内容。例如，你的读者如果刚开始了解基础知识，很可能不需要或者不想在文档介绍部分看到项目的历史信息。若你认为项目历史信息是有必要的，应该在文末加上此类信息的链接。 在介绍某个概念后，给读者展示如何在示例项目或者他们自己的工作中应用它。在概念信息和实际操作之间交替，是一种非常引人入胜的学习方式。 若你正在与一组将要审查和测试你的文档的贡献者一起工作，那么大纲尤其有用。开始写全文草稿前，请先让文档的贡献者帮你审阅大纲。 文档大纲练习 如下是一篇长教程序言部分的大纲，请检查并改进它。你可以： 重排主题顺序。 添加你认为序言部分中应该有的主题。 移除你认为与序言部分无关的主题。 ## The history of the project Describes the history of the development of the project. ## Prerequisites Lists concepts the reader should be familiar with prior to starting, as well as any software or hardware requirements. ## The design of the system Describes how the system works. ## Audience Describes who the tutorial is aimed at. ## Setting up the tutorial Explains how to configure your environment to follow the tutorial. ## Troubleshooting Explains how to diagnose and solve potential problems that might occur when working through the tutorial. ## Useful terminology Lists definitions of terms that the reader needs to know to follow the tutorial. %accordion%点击展开参考答案%accordion% ## Audience Describes who the tutorial is aimed at. ## Prerequisites Lists concepts the reader should be familiar with prior to starting, as well as any software or hardware requirements. ## Setting up the tutorial Explains how to configure your environment to follow the tutorial. ## Useful terminology Lists definitions of terms that the reader needs to know to follow the tutorial. %/accordion% 攥写文档序言 如果读者无法在你的文档中找到他们的需要的内容，他们将会跳过你的文档。为了给你的读者定下一些基本准则，我们建议你的序言应该包括如下信息： 文档覆盖的内容。 读者需要预先了解的知识。 文档不会覆盖的内容。 请记住，你的文档需要容易维护，请不要试图在序言中包山包海。 假设有个叫做Froobus的文档发布平台，如下是这个平台说明文档的序言段落，其包含了前文列表中的信息。 This document explains how to publish Markdown files using the Froobus system. Froobus is a publishing system that runs on a Linux server and converts Markdown files into HTML pages. This document is intended for people who are familiar with Markdown syntax. To learn about the syntax, see the Markdown reference. You also need to be comfortable running simple commands in a Linux terminal. This document doesn't include information about installing or configuring a Froobus publishing system. For information on installing Froobus, see Getting started. 当你完成草稿后，审阅整篇文档是否和概述中预设的期望一致。你的序言是否有精准地概述你想要呈现的主题？可以将这个文档审阅过程视作某种形式对文档的质量测试(QA)。 序言练习 假设有个叫做F@的编程语言，如下文档是其最佳实践指南文档的序言。从中移除掉你觉得无关的内容，并补上你觉得应该添加的内容。 This guide lists best practices for working with the F@ programming language.F@ was developed in 2011 as an open source community project. This guide supplements the F@ style guide. In addition to the best practices in this guide, make sure you also install the F@ command-line linter and run it on your code. The programming language is widely adopted in the health industry. If you have suggestions for additions to the list of best practices, file an issue in the F@ documentation repository. %accordion%点击展开参考答案%accordion% This guide lists best practices for working with the F@ programming language. Before you review this guide, complete the introductory tutorial for new F@ developers. This guide supplements the F@ style guide. In addition to the best practices in this guide, make sure you also install the F@ command-line linter and run it on your code. If you have suggestions for additions to the list of best practices, file an issue in the F@ documentation repository. %/accordion% 添加文档导航 为你的文档添加导航目录和“路标”，确保你的读者在卡住时可以找到他们需要的信息。 清晰的文档导航包括： 介绍和总结段落 清晰的有逻辑的主题延伸 帮助理解主题的标题和子标题 显示用户在文档中位置的目录菜单 指向相关资源和更深入内容的链接 指向下一步学习内容的链接 使用基于任务的标题 选择指引读者执行某项任务的标题，避免在标题内使用不熟悉的术语或者工具。例如，假设你的文档描述的是创建网站的过程。为了创建这个网站，用户必须初始化Froobus框架。而为了初始化Froobus框架，读者必须执行carambola命令行工具。第一眼看上去，在序言章节中使用如下标题是符合逻辑的： Running the carambola command Initializing the Froobus framework 除非你的读者非常熟悉文档主题有关术语和概念，否则更建议你使用更为人熟悉的标题。例如：Creating the site。 标题后跟随文字 大多数读者会希望能在文档每个标题后至少跟随一个简单的介绍。避免在二级标题后马上跟一个三级标题，例如： ## Creating the site ### Running the carambola command 如果在上述例子中加一些简单的介绍，可以给读者以指引： ## Creating the site To create the site, you run the `carambola` command-line tool. The command displays a series of prompts to help you configure the site. ### Running the carambola command 标题练习 通过浏览文档导航，读者可以方便地找到使用你的工具所需的信息。通常来说，一个清晰且组织良好的目录或大纲就像一张地图，可以帮助读者熟悉你的工具的功能。 请对如下目录做改进。你可以重排、添加或者删除项目，也可以添加辅助条目。 About this tutorial Advanced topics Build the asset navigation tree Define resource paths Defining and building projects Launch the development environment Defining and building resources What's next Define image resources Audience See also Build an image resource Define an image project Build an image project Setting up the tutorial Select the tutorial asset root About this guide %accordion%点击展开参考答案%accordion% ## About this tutorial ### Audience ### About this guide ### Advanced topics ## Setting up the tutorial ### Select the tutorial asset root ### Launch the development environment ### Build the asset navigation tree ### Define resource paths ## Defining and building resources ### Define image resources ### Build an image resource ## Defining and building projects ### Define an image project ### Build an image project ## Defining and building databases ### Define a database ### Build a database ## Pushing, publishing, and viewing a database ### Push a database ### Publish a database ### View a database ## Configuring display rules for point data ### Define, configure, and build vector data ## See also ### Sample data files ## What's next %/accordion% 逐步披露信息 对于许多喜欢按照自己的节奏阅读文档的读者来说，学习新概念、想法和技术可能是一种有益的体验。 然而，过快地面对太多的新概念和知识可能会让人不知所措。 读者更更有可能接受逐步向他们披露新信息的较长文档。 以下技巧可以帮助你逐步披露信息： 在使用新术语或新的概念前后，对术语或概念进行介绍。 打破“文字墙”。避免在当页面出现大段大段的文字，在适当的地方加入表格、图标、列表和标题。 拆解长步骤。如果你的列表描述一个长且复杂的步骤，请尝试将它重排成多个较短的列表，每个列表描述一个子步骤。 从简单的例子和说明开始，逐渐介绍更有趣更复杂的技术。例如，在创建网页表单的教程中，可以先介绍文本框，然后再介绍下拉菜单，图像或者其他表单内容。 Reference 原文：https://developers.google.com/tech-writing/two/large-docs Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"TechnicalWriting/Two-Illustrating.html":{"url":"TechnicalWriting/Two-Illustrating.html","title":"Part Two - Illustrating","keywords":"","body":"Illustrating 还记得老师给你布置的大阅读作业吗？你翻阅教科书中的对应章节，拼命地查找...图片！看插图比阅读文字有趣得多。事实上，绝大多数成年人在阅读技术材料方面仍是小孩子 -- 仍然渴望图片而不是文字。 Nirmal Dulal [CC BY-SA 4.0 (https://creativecommons.org/licenses/by-sa/4.0)] 根据Sung 和 Mayer (2012)的研究报告，在文档中插图 -无论质量好坏- 会增加读者对文档的好感。然而，只有指导性的图片才会帮助读者学习。一图胜千言，本单元建议了一些为文档配图的技巧。 先确定插图标题 在对文档进行插图前，先确定插图标题总是有用的。之后，再创建最适配标题的插图。这个过程可以确保插图有达到其目的。 好的插图标题有以下特征： 简洁。一般来说，插图标题仅包含几个单词。 解释要点。看完这个图后，读者需要记住什么？ 聚焦读者注意力。当图片或者图标信息很多时，聚焦尤其重要。 练习 假设你的目标读者是计算机科学专业本科生，正在上“数据结构简介”课程。如下三张图片是课程配图，使用同样的标题。哪张图片是标题的最佳适配？ %accordion%点击展开参考答案%accordion% Figure A是错的。虽然图片很漂亮，但是没有提供任何信息。这个链表还错误地将单向链表编程双向。 Figure B还好。虽然该插图帮助学生了解第一个节点链接到第二个节点，第二个节点链接到第三个节点，以此类推。但是图示上仅体现了链表指针，并没有呈现标题中提及的节点内容。 Figure C是标题的最佳适配。图示清晰地呈现了链表节点内容和链表指针。 %/accordion% 限制单个图片上的信息量 一副精美画作可以逐层揭示更深层次的意义，人们在世界各地艺术博物馆花很多钱来研究这些大作。 相反，像下图一样过于复杂的技术文档插图，会让读者望而却步。 就像你应该避免使用过长的句子一样，请避免视觉上的重复。根据经验，不要将一个段落的信息量放到单张图片内。具体地讲，应该避免使用需要五个列表项才能讲清楚的图片。 将复杂的系统组织成子系统，可以帮你将视觉上的混乱精简得更有条理。如下图所示： 呈现系统整体的图示后，插图介绍每一个子系统的细节。例如： 聚焦读者的注意力 当在屏幕上看到下图一样的图片时，读者很难确定图片要说明什么。 如果加上像下图红色椭圆一样的视觉提示，读者则很容易聚焦到图片真正要呈现的内容。 另外一种聚焦读者注意力的方式是在图片上做标注。图片或者线条上的标注，可以帮我们的眼睛找到正确的“着陆点”。标注往往比大段对图片的文字说明更好。这是因为的标注将读者的注意力聚焦到图片最重要的信息，这样你就可以直接解释你的重点，而不用花时间描述你在讲的是图片的哪个地方。 例如，下图中的箭头和标注让读者可以快速的聚焦到重点。 插图阐述即是重新阐述 极少数第一版文档草稿的插图是足够好的。修改你的插图，让其内容更清晰。在修改时，问自己以下问题： 我该怎么用简化插图？ 该将插图拆分为两个或更多更易理解的图吗？ 图中的文字是否清晰？和背景的对比度是否足够？ 图中的重点是什么？ 例如，下图是伦敦地铁交通图。1931 年之前，地铁图是等比例绘制的，即完全按照地上道路和地铁轨道弯曲度一样弯曲。 1931年，Harry Beck主导了一种新的公共交通图，通过移除地面标记和比例尺，从而简化了旧地图。他的设计中，将信息专注在地图使用者真正关心的部分，即怎么从A站到B站。即使1931年的地址大获成功，Beck在随后的多年中仍然不断简化地图从而使其更清晰。现代的伦敦地铁交通图，尽管增加了新的线路和站点，但仍然使用Beck早期的设计。 练习 参考如下插图： 图中想要表达重点应该是： 函数的递归是指，函数在返回处调用自身，直到到达停止点。 上图中是怎样用复杂的呈现让人看不到重点的？如何解决这个问题？ %accordion%点击展开参考答案%accordion% 上图的一些问题包括： 问题：图中的高亮将读者的注意力吸引走，而让人忽略真正的重点。解决：慎重选择颜色，避免掩盖重点。 问题：图片的色彩对比度不够，对低视力或者特定色盲无法阅读。解决：移除不必要的颜色，确保颜色复合标准色彩对比度建议。 问题：图片上的双向箭头，让人迷惑于图片上流程真正的走向。解决：将双向箭头拆开，一个方向描述函数调用，一个方向描述函数返回 %/accordion% 改进后的上图如下： 上图还有哪些可以修改的地方？ %accordion%点击展开参考答案%accordion% 上图的仍有如下两个问题： 图片仍然过于复杂，需要花费超过一个段落来解释这个插图。可以考虑移除一些多余的信息，或者增加一些更明显的标签来简化。 尽管已经将函数调用和函数返回分为不同的箭头，仍可以考虑加上一些标签说明，让读者知道返回值是啥。 %/accordion% 画图工具 画图工具有很多，如下三个画图工具是免费的或者部分免费的： Google Drawings diagrams.net LucidChart 当从工具导出图片到文档使用的时候，通常的最佳选择是SVG( Scalable Vector Graphics)格式。该格式可以在不影响图片高质量的情况下，被放大或缩小以适配文档大小。 Reference 原文：https://developers.google.com/tech-writing/two/illustrations Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"TechnicalWriting/Two-Sample-code.html":{"url":"TechnicalWriting/Two-Sample-code.html","title":"Part Two - Create sample code","keywords":"","body":"Creating sample code 好的代码范例往往是最佳的文档。即使你的段落和列表像海水一样清澈，程序员仍更喜欢好的代码范例。毕竟文字和代码是不同的语言，代码总是程序员最关心的东西。用文字来描述代码，就像是用英语来解释意大利诗歌一样。 好的代码范例是正确的、简洁的，读者可以快速理解、并用最小的力气重用它。 正确性 代码范例需要符合以下标准： 可以正确编译。 按照预期执行。 最好可以在生产中直接使用。例如，代码不应该有安全漏洞。 遵循编码规范。 代码范例是直接影响用户写代码方式的机会。因此，代码范例应该是使用产品的最佳方式。如果有超过一种代码写法，请用你的团队公认最佳的写法。如果你的团队还没有对比过各种写法的好处或坏处，请先做这件事。 请务必测试你的代码范例。随着时间的推移，代码可能因为系统的变化而不可用。请随时准备着测试和维护你的代码范例，就像你维护其他代码一样。 很多团队使用其单元测试程序作为其范例程序，这有时并不是一个好主意。单元测试代码的主要目的是测试，而范例代码的唯一目的是教会读者。 代码片段是一小段范例程序，往往只有有限的几行。代码片段过多的文档，往往随着时间的推移质量下降，这是因为团队一般不会测试像测试完整范例程序一样测试代码片段。 执行范例代码 好的文档会告诉读者如何执行范例代码。例如，你的文档可能需要告诉读者，必须执行如下动作后才能执行你的范例代码： 安装特定的库文件。 为特定的环境变量赋值。 修改IDE中特定的设置。 用户往往不会正确的执行这些前置动作。一些情况下，用户宁愿直接执行或实验性执行文档中的范例代码。 文档作者应该要描述范例代码执行的预期结果，特别是对那些不容易执行的代码。 简洁 范例代码应该简短，仅包括最核心的部分。当一个C语言新人想要学习如何执行malloc函数时，给这个新人一个简短的代码片段，而不是整个Linux源代码树。无关的代码会分散读者注意力，让读者迷惑。尽管如此，不要为了缩短而缩短，应该是正确优先，其次才是简短。 易理解 如何提供清晰的代码范例，如下是一些建议： 代码中的类、方法或者变量的名字应该体现其含义。 避免用一些难以理解的代码花招来迷惑读者。 避免深度嵌套的代码。 可选： 关键代码可以使用加粗和有颜色的字体标记，吸引读者的注意。但是请谨慎使用高亮，太多的高亮对读者来讲相当于什么也没有高亮。 练习 下面三个代码范例哪个更为有效？假设你的目标读者有对go.so这个API完全不熟悉的人。 MyLevel = go.so.Level(5, 28, 48) MyLevel = go.so.Level(rank=5, 28, 48) MyLevel = go.so.Level(rank=5, dimension=28, opacity=48) %accordion%点击展开参考答案%accordion% 答案3是最佳选择。尽管要保证代码的简短，但是省略掉参数会让新手无所适从。 %/accordion% 注释 在代码范例中使用注释时，请考虑如下建议： 注释应该简短，但是总是清楚优于简短。 避免对有明显含义的代码做注释。但是记住对你这个专家含义很明显的代码，对新手则不一定明显。 将注释的精力花在不够直觉的代码上。 若你的读者对某个技术非常有经验，请不要解释代码正在做什么，而是解释代码为什么要这么做。 应该将代码注释放到代码内还是文档的文字部分（段落中或列表中）？注意，读者复制粘贴的代码不仅仅包含代码本身，也包含内嵌的注释。因此，请将代码的描述信息内嵌到范例代码中。相反，当你不得不解释一个很长或者很取巧的概念时，你应当将这些介绍放在范例代码前的文本中。 练习 下面范例代码的注释有什么问题？（假设该代码的受众是对brAPI不熟悉，但对“流”这个概念比较熟悉的程序员）： /* Create a stream from the text file at pathname /tmp/myfile. */ mystream = br.openstream(pathname=\"/tmp/myfile\", mode=\"z\") %accordion%点击展开参考答案%accordion% 注释有以下瑕疵： 对代码中不言自明的片段做解释。 对代码不够清晰的部分反而没有解释。即，mode参数是什么？其值是z代表什么意义？ %/accordion% 可重用 为了让读者可以方便地重用你的代码，请提供如下信息： 所有运行范例代码的资讯，包括一些前置条件和设定方法。 可以有效地扩展和客制化的代码。 使用可正确编译的、简洁的且易理解的代码是个不错的开始。如果代码让用户的APP崩溃，用户会崩溃的。因此，提供范例代码时，应该考虑代码被整合到其他地方的可能副作用。没人想要不安全或者效率极低的代码。 提供正面和反面范例 除了给读者展示应该做什么，有时也需要告诉读者不应该做什么。例如，许多编程语言允许程序员在等号前后增加空格。但现在假设你正在写一个编程语言指南（例如bash），该语言不允许等号前后加空格。这种情况下，同时提供正面和反面范例往往是不错的选择。例如： [!TIP|label: 正面范例] s=\"The rain in Maine.\" [!DANGER|label: 反面范例,代码中有空格] s = \"The rain in Maine.\" 循序渐进 好的范例代码集应该难易都有。 毫无经验的读者希望简单的代码范例来起步。范例代码集合中最为基础的范例应该是“Hello World”. 掌握住基础后，工程师想要看到更复杂的范例。因此，好的范例代码集是循序渐进的，包括简单、中等和负责的范例程序。 练习 在一个介绍函数的手册中，下面哪个范例函数集是更好的？ 范例集1: A function that takes no parameters and doesn't return anything. A function that takes one parameter but doesn't return anything. A function that takes one parameter and returns one value. A function that takes three parameters and returns one value. 范例集2: A function that takes three parameters and returns one value. 范例集3: A function that takes one parameter and returns one value. A function that takes three parameters and returns one value. %accordion%点击展开参考答案%accordion% 最佳范例集是答案1.提供不同难度的范例代码往往是最优选择，特别是对新手。新手想要看到的简单和中等难度范例代码。请控制想要跳过这些部分，而很快冲到复杂范例代码部分的冲动。 %/accordion% Reference 原文：https://developers.google.com/tech-writing/two/sample-code Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "},"TechnicalWriting/Two-Summary.html":{"url":"TechnicalWriting/Two-Summary.html","title":"Part Two - Summary","keywords":"","body":"Summary 主要介绍如下中级内容： 选取文档风格要求 像读者一样思考 大声朗读文档 写完草稿后检查草稿 找到合适的审阅人 为文档建立大纲。即，先草列再组织文档。 介绍文档的覆盖范围和阅读文档的前提。 使用基于任务的标题。 循序渐进（在一些情况下）。 创建插图前先写插图标题。 控制单个插图内的信息量。 使用标题说明或图内标注强调图片重点。 提供易理解的简洁的范例代码。 代码注释应简短，但应该优先保证准确性。 避免给不言自明的代码写注释。 将注释的精力放在代码中意义不明显的地方。 提供证明和反面范例代码。 提供不同复杂度的代码。 持续修正。 为不同类型的用户提供不同的文档。 和读者熟知的内容做类比和对比。 在教程中，通过示例强化概念。 在教程中，标注读者可能碰到的问题。 如果时间允许，请阅读附加材料。 Reference 原文：https://developers.google.com/tech-writing/two/summary Copyright @ Lambert 2022 all right reserved，powered by GitbookModified Time： 2024-02-24 14:20:10 "}}